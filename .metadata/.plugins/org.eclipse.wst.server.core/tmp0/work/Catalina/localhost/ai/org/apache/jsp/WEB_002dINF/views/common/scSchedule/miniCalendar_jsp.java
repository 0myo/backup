/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.81
 * Generated at: 2022-11-24 00:30:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.common.scSchedule;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class miniCalendar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("jar:file:/D:/A_TeachingMaterial/6.JspSpring/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/FinalProject/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/D:/A_TeachingMaterial/6.JspSpring/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/FinalProject/WEB-INF/lib/spring-security-taglibs-3.2.3.RELEASE.jar!/META-INF/security.tld", Long.valueOf(1395715282000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1662347357502L));
    _jspx_dependants.put("/WEB-INF/lib/spring-security-taglibs-3.2.3.RELEASE.jar", Long.valueOf(1663134781857L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("<!--   <meta charset='utf-8' /> -->\r\n");
      out.write("  <!-- 화면 해상도에 따라 글자 크기 대응(모바일 대응) -->\r\n");
      out.write("<!--   <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no\"> -->\r\n");
      out.write("\r\n");
      out.write("	<script src=\"https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/locales-all.min.js\"></script>\r\n");
      out.write("	<script src=\"https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js\"></script>\r\n");
      out.write("	<link href=\"https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.css\" rel=\"stylesheet\">\r\n");
      out.write("	\r\n");
      out.write("<!-- 	<script	src=\"https://uicdn.toast.com/tui.time-picker/latest/tui-time-picker.js\"></script> -->\r\n");
      out.write("<!-- 	<script	src=\"https://uicdn.toast.com/tui.date-picker/latest/tui-date-picker.js\"></script> -->\r\n");
      out.write("	\r\n");
      out.write("<!-- 	<link rel=\"stylesheet\"	href=\"https://uicdn.toast.com/tui.time-picker/latest/tui-time-picker.css\" /> -->\r\n");
      out.write("<!-- 	<link rel=\"stylesheet\"	href=\"https://uicdn.toast.com/tui.date-picker/latest/tui-date-picker.css\" /> -->\r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"container-fluid\">\r\n");
      out.write("	<div class=\"row\"  >\r\n");
      out.write("		<div class=\"card\" >\r\n");
      out.write("		\r\n");
      out.write("			<div class=\"card-body\" >\r\n");
      out.write("				<div id='calendar' style=\"overflow-y:hidden; width : 555px;\"></div>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>	\r\n");
      out.write("	</div>\r\n");
      out.write("</div>\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("var scheduleList = ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${scheduleList}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(";\r\n");
      out.write("for(var i=0;i<scheduleList.length;i++){\r\n");
      out.write("	var startBefore = scheduleList[i].start\r\n");
      out.write("	var startAfter = startBefore.replace(/\\*/gi,\"T\");\r\n");
      out.write("	scheduleList[i].start = startAfter;\r\n");
      out.write("	var endBefore = scheduleList[i].end\r\n");
      out.write("	if(endBefore){\r\n");
      out.write("		var endAfter = endBefore.replace(/\\*/gi,\"T\");\r\n");
      out.write("		scheduleList[i].end = endAfter;\r\n");
      out.write("	}\r\n");
      out.write("}\r\n");
      out.write("console.log(scheduleList)\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("var calendar = null;\r\n");
      out.write("\r\n");
      out.write(" document.addEventListener('DOMContentLoaded', function() {\r\n");
      out.write("   var calendarEl = document.getElementById('calendar');\r\n");
      out.write("   calendar = new FullCalendar.Calendar(calendarEl, {\r\n");
      out.write("	   headerToolbar: {\r\n");
      out.write("	          left: 'prev,next today',\r\n");
      out.write("	          center: 'title',\r\n");
      out.write("	          right: 'dayGridMonth'\r\n");
      out.write("	        }, // 월별로 보여줄지, 주별로 보여줄 지 선택하는  버튼 \r\n");
      out.write("		initialView: 'dayGridMonth',\r\n");
      out.write("		selectable: true,\r\n");
      out.write("		locale:'ko',\r\n");
      out.write("		events: scheduleList,\r\n");
      out.write("	   editable: false, // 수정 가능?\r\n");
      out.write("	   dayMaxEvents: true,\r\n");
      out.write("	   height:580\r\n");
      out.write("   });\r\n");
      out.write("   calendar.render();\r\n");
      out.write(" });\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
