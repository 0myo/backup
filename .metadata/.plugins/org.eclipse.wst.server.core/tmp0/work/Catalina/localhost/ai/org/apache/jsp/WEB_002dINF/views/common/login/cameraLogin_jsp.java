/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.81
 * Generated at: 2022-11-18 07:11:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.common.login;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class cameraLogin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(5);
    _jspx_dependants.put("jar:file:/D:/A_TeachingMaterial/6.JspSpring/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/FinalProject/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/D:/A_TeachingMaterial/6.JspSpring/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/FinalProject/WEB-INF/lib/spring-security-taglibs-3.2.3.RELEASE.jar!/META-INF/security.tld", Long.valueOf(1395715282000L));
    _jspx_dependants.put("jar:file:/D:/A_TeachingMaterial/6.JspSpring/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/FinalProject/WEB-INF/lib/jstl-1.2.jar!/META-INF/fmt.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1662347357502L));
    _jspx_dependants.put("/WEB-INF/lib/spring-security-taglibs-3.2.3.RELEASE.jar", Long.valueOf(1663134781857L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(" \r\n");
      out.write("\r\n");
      out.write("<div class=\"card mb-0\">\r\n");
      out.write("<div class=\"card-body\">\r\n");
      out.write("\r\n");
      out.write("<div class=\"row\" style=\"margin-top: 10px;\">\r\n");
      out.write("	<div class=\"col-sm-12 justify-content-center text-center\">  \r\n");
      out.write("		  <video id=\"video\" width=\"1000\" height=\"700\" autoplay></video> \r\n");
      out.write("	</div>\r\n");
      out.write("	<div style=\"visibility:none;\"class=\"\" style=\"border-right: solid 1px;\"> \r\n");
      out.write("		<canvas hidden=\"hidden\"  id=\"canvas\" width=\"640\" height=\"480\" ></canvas>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"card-footer  p-0 text-center d-flex justify-content-center\">\r\n");
      out.write("                                        <div style=\"cursor:pointer;\" class=\"card-footer-item card-footer-item-bordered bg-primary\"onclick=\"uploadCanvasToServer()\">\r\n");
      out.write("                                            <a id=\"snap\" class=\"\" >사진촬영</a>\r\n");
      out.write("                                        </div>\r\n");
      out.write("                                        <div style=\"cursor:pointer;\" class=\"card-footer-item card-footer-item-bordered bg-danger\">\r\n");
      out.write("                                            <a class=\"text-white\"onclick=\"javascript:window.close()\">닫기</a>\r\n");
      out.write("                                        </div>\r\n");
      out.write("                                    </div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("	// Grab elements, create settings, etc.\r\n");
      out.write("	var video = document.getElementById('video');\r\n");
      out.write("	// Get access to the camera!\r\n");
      out.write("	if(navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n");
      out.write("	    // Not adding `{ audio: true }` since we only want video now\r\n");
      out.write("	    navigator.mediaDevices.getUserMedia({ video: true }).then(function(stream) {\r\n");
      out.write("	        //video.src = window.URL.createObjectURL(stream);\r\n");
      out.write("	        video.srcObject = stream;\r\n");
      out.write("	        video.play();\r\n");
      out.write("	    });\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");
      out.write("<script>\r\n");
      out.write("	// Elements for taking the snapshot\r\n");
      out.write("	var canvas = document.getElementById('canvas');\r\n");
      out.write("	var context = canvas.getContext('2d');\r\n");
      out.write("	var video = document.getElementById('video');\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("	uploadCanvasToServer = function() {\r\n");
      out.write("		  context.drawImage(video, 0, 0, 640, 480);\r\n");
      out.write("		  const canvas = document.getElementById('canvas');\r\n");
      out.write("		  const imgBase64 = canvas.toDataURL('image/jpeg', 'image/octet-stream');\r\n");
      out.write("		  const decodImg = atob(imgBase64.split(',')[1]);\r\n");
      out.write("	\r\n");
      out.write("		  let array = [];\r\n");
      out.write("		  for (let i = 0; i < decodImg .length; i++) {\r\n");
      out.write("		    array.push(decodImg .charCodeAt(i));\r\n");
      out.write("		  }\r\n");
      out.write("	\r\n");
      out.write("		  \r\n");
      out.write("		  $(\"#canvas\").attr(\"display\",\"none\");\r\n");
      out.write("		  \r\n");
      out.write("		  \r\n");
      out.write("		  const file = new Blob([new Uint8Array(array)], {type: 'image/jpeg'});\r\n");
      out.write("		  const filename = 'img.jpg';\r\n");
      out.write("		  \r\n");
      out.write("		  let fd = new FormData();\r\n");
      out.write("		  fd.append(\"file\", file, filename);\r\n");
      out.write("		  alert(\"파일 전송\");\r\n");
      out.write("		  $.ajax({\r\n");
      out.write("		     url : \"http://192.168.141.15:5001/webcam\",\r\n");
      out.write("		     type : \"post\",\r\n");
      out.write("		     contentType : false,\r\n");
      out.write("		     processData : false,\r\n");
      out.write("		     data : fd,\r\n");
      out.write("		     danataType : \"text\",\r\n");
      out.write("		     success : function(data) {\r\n");
      out.write("		    	 console.log(data);\r\n");
      out.write("		     },\r\n");
      out.write("		     error : function(errorMessage) {\r\n");
      out.write("		        alert(\"파일 전송 실패, 관리자에게 문의바랍니다.\")\r\n");
      out.write("		        console.log(\"Error\" + errorMessage);\r\n");
      out.write("\r\n");
      out.write("		     },\r\n");
      out.write("		  }).done(function(data) {\r\n");
      out.write("		     console.log(data);\r\n");
      out.write("		  });\r\n");
      out.write("		  \r\n");
      out.write("		};\r\n");
      out.write("</script>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
