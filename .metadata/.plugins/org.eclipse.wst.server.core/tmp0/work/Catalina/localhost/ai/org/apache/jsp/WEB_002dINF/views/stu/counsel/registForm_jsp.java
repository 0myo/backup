/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.81
 * Generated at: 2022-11-18 10:10:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.stu.counsel;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class registForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("jar:file:/D:/A_TeachingMaterial/6.JspSpring/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/FinalProject/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/D:/A_TeachingMaterial/6.JspSpring/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/FinalProject/WEB-INF/lib/jstl-1.2.jar!/META-INF/fn.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1662347357502L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write(".tui-datepicker {\r\n");
      out.write("	z-index: 999;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("	href=\"https://uicdn.toast.com/tui.time-picker/latest/tui-time-picker.css\" />\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("	href=\"https://uicdn.toast.com/tui.date-picker/latest/tui-date-picker.css\" />\r\n");
      out.write("<!-- ================================================= -->\r\n");
      out.write("<!-- MAIN-CONTENT -->\r\n");
      out.write("<!-- ================================================= -->\r\n");
      out.write("<div class=\"card\">\r\n");
      out.write("	<h3 class=\"card-header\">상담 신청</h3>	\r\n");
      out.write("		<div class=\"card-body\">\r\n");
      out.write("\r\n");
      out.write("  <!-- Main content -->\r\n");
      out.write("		<div class=\"card\">	\r\n");
      out.write("			<div class=\"card-body\">\r\n");
      out.write("			\r\n");
      out.write("				<div class=\"row justify-content-center\">					\r\n");
      out.write("					<div class=\"user-avatar float-xl-left pr-4 float-none\">\r\n");
      out.write("						<span id=\"memImg\" class=\"manPicture\" data-anoCd=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${prof.anoCd}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"\r\n");
      out.write("	            		  	   		      style=\"display:block;width: 150px; height: 150px; border-radius: 70%; overflow: hidden;\"></span>\r\n");
      out.write("					</div>	\r\n");
      out.write("				</div>\r\n");
      out.write("				<div class=\"row justify-content-center\">\r\n");
      out.write("					<h3 class=\"font-24 m-b-10\" style=\"font-weight: bold;\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${prof.name }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("&nbsp;교수</h3>\r\n");
      out.write("				</div>\r\n");
      out.write("				\r\n");
      out.write("				<input type=\"hidden\" name=\"profId\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${prof.profCd }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("				\r\n");
      out.write("				\r\n");
      out.write("				<div class=\"row justify-content-center\">\r\n");
      out.write("					<label for=\"counselDate\" class=\"col-sm-2 control-label text-center\">날짜 선택</label>\r\n");
      out.write("					<div class=\"tui-datepicker-input tui-datetime-input tui-has-focus \">\r\n");
      out.write("						<input type=\"text\" id=\"datepicker-input\" aria-label=\"Date-Time\" name=\"selectDate\"> <span class=\"tui-ico-date\"></span>\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("				\r\n");
      out.write("				<div id=\"wrapper\" style=\"margin-top: -1px; position:absolute; left:30%;\"></div>\r\n");
      out.write("				\r\n");
      out.write("				<div class=\"row justify-content-center\" style=\"margin-top:20px;\">\r\n");
      out.write("					<form role=\"form\" method=\"post\" name=\"registForm\">\r\n");
      out.write("					<div id=\"summernote\"></div>\r\n");
      out.write("\r\n");
      out.write("					</form>\r\n");
      out.write("				</div>\r\n");
      out.write("				\r\n");
      out.write("				<div class=\"col-xl-3 col-lg-12 col-md-12 col-sm-12 col-12\">\r\n");
      out.write("					<div class=\"float-xl-right float-none mt-xl-0 mt-2 row justify-content-end\">\r\n");
      out.write("						<button class=\"btn btn-secondary\" id=\"btn_register\">예약신청</button>\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("			\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("		\r\n");
      out.write("</div>		\r\n");
      out.write("\r\n");
      out.write("<input type=\"hidden\" id=\"selectDate\" value=\"\">\r\n");
      out.write("\r\n");
      out.write("<script\r\n");
      out.write("src=\"https://uicdn.toast.com/tui.time-picker/latest/tui-time-picker.js\"></script>\r\n");
      out.write("<script\r\n");
      out.write("src=\"https://uicdn.toast.com/tui.date-picker/latest/tui-date-picker.js\"></script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("var datepicker = new tui.DatePicker('#wrapper', {\r\n");
      out.write("	\r\n");
      out.write("    date: new Date(),\r\n");
      out.write("    selectableRanges: [\r\n");
      out.write("        [new Date(), new Date(2222, 0, 1)]\r\n");
      out.write("        \r\n");
      out.write("    ],\r\n");
      out.write("    language: 'ko',\r\n");
      out.write("    input: {\r\n");
      out.write("      element: '#datepicker-input',\r\n");
      out.write("      format: 'yyyy-MM-dd HH:mm A',\r\n");
      out.write("\r\n");
      out.write("    },\r\n");
      out.write("    timePicker: {\r\n");
      out.write("    	 initialHour: 9,\r\n");
      out.write("         initialMinute: 00,\r\n");
      out.write("         inputType: 'selectbox',\r\n");
      out.write("         hourStep: 1,\r\n");
      out.write("         minuteStep: 15,\r\n");
      out.write("         showMeridiem: false,\r\n");
      out.write("    }\r\n");
      out.write("  });\r\n");
      out.write("\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("var pickDate = datepicker.getDate();\r\n");
      out.write("var selectDate = f_transFormatToTime(pickDate); \r\n");
      out.write("var header = '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${_csrf.headerName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("';\r\n");
      out.write("var token =  '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${_csrf.token}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("';\r\n");
      out.write("	//글쓰기\r\n");
      out.write("	/*\r\n");
      out.write("	function f_regist() {\r\n");
      out.write("		var selectDate = datepicker.getDate(); //Thu Oct 13 2022 22:01:13 GMT+0900 (한국 표준시) \r\n");
      out.write("		/* var selectDate = f_transFormat(date); // 2022-10-13 \r\n");
      out.write("		console.log(selectDate);\r\n");
      out.write("		const content = $('#summernote').summernote('code');\r\n");
      out.write("		const formData = new FormData;\r\n");
      out.write("		formData.append(\"content\", content);\r\n");
      out.write("		/* console.log(\"content\" + content); \r\n");
      out.write("	}\r\n");
      out.write("	*/\r\n");
      out.write("	datepicker.on('change', ()=> {\r\n");
      out.write("// 		alert(\"날짜선택함\");\r\n");
      out.write("		pickDate = datepicker.getDate(); //Thu Oct 13 2022 22:01:13 GMT+0900 (한국 표준시) \r\n");
      out.write("		selectDate = f_transFormatToTime(pickDate); \r\n");
      out.write("		document.querySelector('#selectDate').value = selectDate;\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	$(\"#btn_register\").on(\"click\",()=> {\r\n");
      out.write("		\r\n");
      out.write("		const content = $('#summernote').summernote('code');\r\n");
      out.write("		selectDate = document.querySelector('#selectDate').value;\r\n");
      out.write("		var profId=$('input[name=profId]').val();\r\n");
      out.write("		\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			type:\"post\",\r\n");
      out.write("			url:\"");
      out.print(request.getContextPath());
      out.write("/stu/counsel/apply\",\r\n");
      out.write("			data:{\"appContent\":content,\r\n");
      out.write("				  \"profId\":profId,\r\n");
      out.write("				  \"applyDate\":selectDate\r\n");
      out.write("				  },  // 넘길 데이타\r\n");
      out.write("			//\"applyDate\":selectDate,\"appContent\":content,\r\n");
      out.write("			dataType:\"text\", // 보통 받아온 데이터에 JSON.parse를 할지 안할지 여부\r\n");
      out.write("			success:(rslt)=>{\r\n");
      out.write("				alert(\"신청이 완료되었습니다.\");\r\n");
      out.write("				CloseWindow(); // 요게 있어야 항상 디버깅이 편함\r\n");
      out.write("			},\r\n");
      out.write("			error:(request,status,error)=>{\r\n");
      out.write("				alert(\"code:\"+request.status+\"\\n\"+\"message:\"+request.responseText+\"\\n\"+\"error:\"+error);\r\n");
      out.write("			\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("<script>\r\n");
      out.write("window.onload=function(){\r\n");
      out.write("	summernote_go($('#summernote'),'");
      out.print(request.getContextPath());
      out.write("'); \r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("$(document).ready(function() {\r\n");
      out.write("	\r\n");
      out.write("	  $('#summernote').summernote({\r\n");
      out.write("		  placeholder:'상담 원하는 내용을 간략하게 적어주세요.',\r\n");
      out.write("			lang:'ko-KR',\r\n");
      out.write("			width:500,\r\n");
      out.write("			height:150,\r\n");
      out.write("		  \r\n");
      out.write("		  toolbar: [\r\n");
      out.write("			    ['style', ['bold', 'italic', 'underline', 'clear']],\r\n");
      out.write("			  ]\r\n");
      out.write("		  \r\n");
      out.write("	  });\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("MemberPictureThumb(\"");
      out.print(request.getContextPath());
      out.write("\");\r\n");
      out.write("\r\n");
      out.write("let inputPhone = $(\"input[name=phone]\");\r\n");
      out.write("inputPhone.change(function(){\r\n");
      out.write("	inputPhoneChange();\r\n");
      out.write("});\r\n");
      out.write("let inputAccNum = $(\"input[name=accNum]\");\r\n");
      out.write("inputAccNum.change(function(){\r\n");
      out.write("	inputAccountChange();\r\n");
      out.write("})\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("function inputPhoneChange(){\r\n");
      out.write("	let inputPhone = $(\"input[name=phone]\");\r\n");
      out.write("	let phone = inputPhone.val();\r\n");
      out.write("	phone = phone.replace(/[^0-9]/g, '').replace(/^(\\d{2,3})(\\d{3,4})(\\d{4})$/, `$1-$2-$3`);\r\n");
      out.write("	inputPhone.val(phone);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function inputAccountChange(){\r\n");
      out.write("	let inputAccNum = $(\"input[name=accNum]\");\r\n");
      out.write("	let accNum = inputAccNum.val();\r\n");
      out.write("	accNum = accNum.replace(/[^0-9]/g, '');\r\n");
      out.write("	inputAccNum.val(accNum);\r\n");
      out.write("}\r\n");
      out.write("inputPhoneChange();\r\n");
      out.write("inputAccountChange();\r\n");
      out.write("</script>\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("var cfile = document.querySelector('#uploadFile');\r\n");
      out.write("var memImg = document.querySelector('#memImg');\r\n");
      out.write("//만약 쪼메 IE11등 쪼메 약간 이전 브라우져를 지원하려면 \r\n");
      out.write("function fileRead(p_file,p_target){\r\n");
      out.write("    var fileReader = new FileReader(); // 파일 읽어주는 아저씨 생성\r\n");
      out.write("    fileReader.readAsDataURL(p_file);\r\n");
      out.write("    fileReader.onload = function(){\r\n");
      out.write("        //console.log(fileReader.result); // 읽은 내용이 result 속성에 담겨있음\r\n");
      out.write("        var  yumi = document.createElement(\"img\"); // 이미지 태그 생성\r\n");
      out.write("        yumi.style.borderRadius=\"20px\";\r\n");
      out.write("        yumi.width = 200;\r\n");
      out.write("        yumi.height = 250;\r\n");
      out.write("        yumi.src = fileReader.result;  // src에 이미지 읽은 내용 전달\r\n");
      out.write("        p_target.innerHTML=\"\";\r\n");
      out.write("        p_target.appendChild(yumi); // 화면에 보이겡\r\n");
      out.write("    }\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("cfile.onchange = function(){\r\n");
      out.write("    console.log(cfile.files);    // 제일 중요한 속성 files, 오직 사용자가 선택해준 파일만 읽을 수 있음\r\n");
      out.write("    // 아작스에 심부름꾼이 필요한 것처럼, 파일 읽어주는 목소리 좋은 알아 아저씨 필요\r\n");
      out.write("  //  let oneFile = cfile.files[0];\r\n");
      out.write("    for(let i=0; i< cfile.files.length; i++){  // 기본적으로 let으로 해야 정상 동작, 변수 범위의 문제\r\n");
      out.write("        fileRead(cfile.files[i],memImg); // 파일 익는 부분을 1개씩 별도 처링  \r\n");
      out.write("	}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("function modify(){\r\n");
      out.write("	var flag = confirm(\"정보를 수정하시겠습니까?\");\r\n");
      out.write("	if(flag){\r\n");
      out.write("		var form = $('#form');\r\n");
      out.write("		var formData = new FormData($('#form')[0]);\r\n");
      out.write("		for(var i=0;i<cfile.files.length;i++){\r\n");
      out.write("			let file = cfile.files[i]\r\n");
      out.write("			formData.append(\"uploadFile\",file);\r\n");
      out.write("		}\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			url:'");
      out.print(request.getContextPath());
      out.write("/stu/aca/modify',\r\n");
      out.write("			data : formData,\r\n");
      out.write("			method : \"post\",\r\n");
      out.write("			contentType:false,\r\n");
      out.write("			processData:false,\r\n");
      out.write("			dataType:\"json\",\r\n");
      out.write("			success:function(data){\r\n");
      out.write("				alert(\"정보 수정에 성공하였습니다.\");\r\n");
      out.write("				$('input[name=phone]').val(data.phone);\r\n");
      out.write("				$('input[name=email]').val(data.email);\r\n");
      out.write("				$('input[name=add1]').val(data.add1);\r\n");
      out.write("				$('input[name=add2]').val(data.add2);\r\n");
      out.write("				$('input[name=accHolder]').val(data.accHolder);\r\n");
      out.write("				$('input[name=bankName]').val(data.bankName);\r\n");
      out.write("				$('input[name=accNum]').val(data.accNum);\r\n");
      out.write("			},\r\n");
      out.write("			error:function(){\r\n");
      out.write("				alert(\"정보 수정에 실패하였습니다. 관리자에게 문의하세요.\");\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		})\r\n");
      out.write("		\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
