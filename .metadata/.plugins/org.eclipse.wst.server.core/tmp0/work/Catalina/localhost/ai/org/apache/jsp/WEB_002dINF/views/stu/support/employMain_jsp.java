/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.81
 * Generated at: 2022-11-17 10:14:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.stu.support;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class employMain_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("<style>\r\n");
      out.write("#recordInfoMark {\r\n");
      out.write("	margin-top: 10px;\r\n");
      out.write("	background-color: gray;\r\n");
      out.write("	border-radius: 50%;\r\n");
      out.write("	width: 50px;\r\n");
      out.write("	height: 50px;\r\n");
      out.write("	display: inline-block;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#scriptCheck:hover {\r\n");
      out.write("	color: red;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(".op2 {\r\n");
      out.write("	margin-left:10px;\r\n");
      out.write("	animation: op2 1s infinite;\r\n");
      out.write("	border-radius: 50%;\r\n");
      out.write("	display: inline-block;\r\n");
      out.write("	background-color: red;\r\n");
      out.write("	width: 35px;\r\n");
      out.write("	height: 35px;\r\n");
      out.write("	display:none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("@keyframes op2 {\r\n");
      out.write("	 30% {\r\n");
      out.write("		opacity: 0.3;\r\n");
      out.write("		}\r\n");
      out.write("}\r\n");
      out.write("#recordbtn {\r\n");
      out.write("	background-color: rgb(52, 235, 113);\r\n");
      out.write("	border-radius: 30px;\r\n");
      out.write("	border: none;\r\n");
      out.write("	width: 300px;\r\n");
      out.write("	height: 50px;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("	font-weight: bold;\r\n");
      out.write("	position: relative;\r\n");
      out.write("	bottom: 20px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#interviewScript {\r\n");
      out.write("	width: 50%;\r\n");
      out.write("	height: 300px;\r\n");
      out.write("	border: 3px #648CFF solid;\r\n");
      out.write("	border-radius:20px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#audio {\r\n");
      out.write("	top: 70px;\r\n");
      out.write("	display: inline-block;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#recordCheck {\r\n");
      out.write("	position: relative;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#recordSubmit {\r\n");
      out.write("	background-color: rgb(52, 119, 235);\r\n");
      out.write("	border-radius: 30px;\r\n");
      out.write("	border: none;\r\n");
      out.write("	width: 150px;\r\n");
      out.write("	height: 50px;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("	font-weight: bold;\r\n");
      out.write("	color: white;\r\n");
      out.write("	position: relative;\r\n");
      out.write("	bottom: 23px;\r\n");
      out.write("	margin-left: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#script_show_btn {\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#script_show_btn:hover {\r\n");
      out.write("	color: red;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#analysisDiv {\r\n");
      out.write("	display: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#outputdiv {\r\n");
      out.write("	font-size: 20px;\r\n");
      out.write("	font-weight: bold;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#myChartdiv {\r\n");
      out.write("	display: none;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<script\r\n");
      out.write("	src=\"");
      out.print(request.getContextPath());
      out.write("/resources/js/diff/diff_match_patch_uncompressed.js\">\r\n");
      out.write("	</script>\r\n");
      out.write("<script\r\n");
      out.write("	src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js\">\r\n");
      out.write("</script> \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("var dmp = new diff_match_patch();\r\n");
      out.write("\r\n");
      out.write("function launch() {\r\n");
      out.write("  var text1 = document.getElementById('text1').value;\r\n");
      out.write("  var text2 = document.getElementById('text2').value;\r\n");
      out.write("  dmp.Diff_Timeout = parseFloat(document.getElementById('timeout').value);\r\n");
      out.write("  dmp.Diff_EditCost = parseFloat(document.getElementById('editcost').value);\r\n");
      out.write("\r\n");
      out.write("  var ms_start = (new Date()).getTime();\r\n");
      out.write("  var d = dmp.diff_main(text1, text2);\r\n");
      out.write("  var ms_end = (new Date()).getTime();\r\n");
      out.write("\r\n");
      out.write("  if (document.getElementById('semantic').checked) {\r\n");
      out.write("    dmp.diff_cleanupSemantic(d);\r\n");
      out.write("  }\r\n");
      out.write("  if (document.getElementById('efficiency').checked) {\r\n");
      out.write("    dmp.diff_cleanupEfficiency(d);\r\n");
      out.write("  }\r\n");
      out.write("  var ds = dmp.diff_prettyHtml(d);\r\n");
      out.write("  var analysisDiv = document.getElementById('analysisDiv');\r\n");
      out.write("  analysisDiv.style.display=\"block\";\r\n");
      out.write("  outputdiv.innerHTML = ds;\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<div class=\"pills-regular\">\r\n");
      out.write("	<ul class=\"nav nav-pills mb-1\" id=\"pills-tab\" role=\"tablist\">\r\n");
      out.write("		<li class=\"nav-item\"><a class=\"nav-link active\"\r\n");
      out.write("			id=\"pills-home-tab\" data-toggle=\"pill\" href=\"#pills-home\" role=\"tab\"\r\n");
      out.write("			aria-controls=\"home\" aria-selected=\"true\">표정분석</a></li>\r\n");
      out.write("		<li class=\"nav-item\"><a class=\"nav-link\" id=\"pills-profile-tab\"\r\n");
      out.write("			data-toggle=\"pill\" href=\"#pills-profile\" role=\"tab\"\r\n");
      out.write("			aria-controls=\"profile\" aria-selected=\"false\">발음분석</a></li>\r\n");
      out.write("\r\n");
      out.write("	</ul>\r\n");
      out.write("	<div class=\"tab-content\" id=\"pills-tabContent\">\r\n");
      out.write("		<div class=\"tab-pane fade show active\" id=\"pills-home\" role=\"tabpanel\"\r\n");
      out.write("			aria-labelledby=\"pills-home-tab\">\r\n");
      out.write("			<div class=\"row\">\r\n");
      out.write("				<div id=\"videoDiv\" class=\"col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6\"\r\n");
      out.write("					style=\"height: 35vw; border-radius:20px; border: 3px #648CFF solid;\"></div>\r\n");
      out.write("				<div style=\" border-radius:20px;\" \r\n");
      out.write("					class=\"col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6\">\r\n");
      out.write("					<div class=\"card faceScript\">\r\n");
      out.write("						<div class=\"card-header\" style=\"margin-top:5px; background-color:#648CFF;\">\r\n");
      out.write("						 	<h3 style=\"color:white ;\"><strong>모의면접 이용 방법</strong></h3>\r\n");
      out.write("						</div>\r\n");
      out.write("						<div class=\"card-body\">\r\n");
      out.write("							<span style=\"font-size: 18px;\">본 페이지는 <strong>웹캠</strong>을 이용한 모의면접 페이지 입니다. 원활한 서비스 이용을 위해서 웹캠사용을 허가해주시기 바랍니다.</span>\r\n");
      out.write("							<br>	\r\n");
      out.write("							<br>\r\n");
      out.write("							<span style=\"font-size:15px;\">*이용방법</span>\r\n");
      out.write("							<br>\r\n");
      out.write("							<br>\r\n");
      out.write("							<div style=\"font-size: 18px;\">\r\n");
      out.write("							모의면접 질문 스크립트 확인하기 버튼 클릭 웹캠 켜기 -> 녹화시작 -> 녹화종료. 녹화가 종료되면 해당 녹화영상을\r\n");
      out.write("							분석하여 모의 면접 점수 결과를 확인할 수 있습니다.\r\n");
      out.write("							</div>\r\n");
      out.write("						</div>\r\n");
      out.write("					</div>\r\n");
      out.write("					<div class=\"card\">\r\n");
      out.write("						<div class=\"card-header\" style=\"background-color:#648CFF;\">\r\n");
      out.write("							<strong id=\"faceScriptHeader\" style=\"font-size: 20px;color:white; \">모의 면접 질문 스크립트</strong>\r\n");
      out.write("						</div>\r\n");
      out.write("						<div class=\"card-body\">\r\n");
      out.write("							<span id=\"scriptCheck\" class=\"faceScript\" onclick=\"showFaceScript()\"> 모의면접 질문 스크립트 확인하기.</span>\r\n");
      out.write("							<div id=\"scriptContent\" class=\"faceScript\">\r\n");
      out.write("							\r\n");
      out.write("							\r\n");
      out.write("							</div>\r\n");
      out.write("							<div id=\"myChartdiv\">\r\n");
      out.write("								<canvas id=\"myChart\" style=\"width:100%;max-width:600px\"></canvas>\r\n");
      out.write("							</div>\r\n");
      out.write("							<div class=\"row\">\r\n");
      out.write("								<div class=\"card-body\" id=\"analysisResult\" class=\"col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6\">\r\n");
      out.write("								\r\n");
      out.write("								</div>\r\n");
      out.write("								<div class=\"card-body col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6\">\r\n");
      out.write("									<span id=\"analysisNotice\" style=\"font-size: 18px; color : #ef172cd9\"></span>\r\n");
      out.write("								</div>\r\n");
      out.write("							</div>\r\n");
      out.write("						</div>\r\n");
      out.write("					\r\n");
      out.write("					\r\n");
      out.write("					</div>\r\n");
      out.write("					\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("			<br>\r\n");
      out.write("			<div class=\"row\">\r\n");
      out.write("				<button class=\"btn btn-outline-brand\" onclick=\"webcamOn()\">웹캠 켜기</button>\r\n");
      out.write("				<button class=\"btn btn-outline-brand\" onclick=\"webcamOff()\">웹캠 끄기</button>\r\n");
      out.write("				<button class=\"btn btn-outline-brand\" onclick=\"videoCaptureStart()\" id=\"start-btn\">녹화 시작</button>\r\n");
      out.write("				<button class=\"btn btn-outline-brand\" onclick=\"videoCaptureEnd()\" id=\"finish-btn\">녹화 종료</button>\r\n");
      out.write("				<button class=\"btn btn-outline-brand\" id=\"download-btn\">다운로드</button>\r\n");
      out.write("				<div id=\"redBtn\" class=\"op2 align-self-center\" ></div>\r\n");
      out.write("			</div>\r\n");
      out.write("			\r\n");
      out.write("		</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("		\r\n");
      out.write("	\r\n");
      out.write("		<!-- 음성 인식  -->\r\n");
      out.write("		<div class=\"tab-pane fade\" id=\"pills-profile\" role=\"tabpanel\"\r\n");
      out.write("			aria-labelledby=\"pills-profile-tab\">\r\n");
      out.write("			<div class=\"row\">\r\n");
      out.write("				<div class=\"card col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6\">\r\n");
      out.write("					<div class=\"card-header\">\r\n");
      out.write("					<h1>AI 음성 모의 면접</h1>\r\n");
      out.write("					</div>\r\n");
      out.write("					<div class=\"card-body\">\r\n");
      out.write("						<p style=\"font-size:18px\">본 서비스는 면접시 발음의 정확도를 분석할 수 있는 서비스를 제공합니다.</p>\r\n");
      out.write("						<h2>*사용방법*</h2>\r\n");
      out.write("						<p style=\"width: 80%; font-size:17px;\">스크립트 보이기 버튼을 누르기 -> 녹음 시작 버튼 클릭-> 주어진 스크립트 파일을 읽음 -> 녹음 종료 버튼 클릭 -> 녹음 파일 전송 클릭\r\n");
      out.write("						<br>이후 스크립트의 내용과 녹음된 목소리의 발음을 비교해줍니다.</p>\r\n");
      out.write("						<p id=\"script_show_btn\" onclick=\"show_script()\" style=\"font-size:20px; color:#4287f5\">스크립트 보이기</p>\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div id=\"interviewScript\" class=\"card-body col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6\">\r\n");
      out.write("					<p id=\"script_body\" class=\"card-text\" style=\"font-size:20px;\"></p>\r\n");
      out.write("							\r\n");
      out.write("					<div>\r\n");
      out.write("						<div id=\"analysisDiv\" class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\">\r\n");
      out.write("							<TABLE WIDTH=\"100%\">\r\n");
      out.write("								<TR>\r\n");
      out.write("									<TD WIDTH=\"50%\">\r\n");
      out.write("										<H3 style=\"color:#6b97db\">내가 말한 것</H3> <TEXTAREA ID=\"text1\" readonly STYLE=\"width: 100%; font-size:20px;\"\r\n");
      out.write("											ROWS=7></TEXTAREA>\r\n");
      out.write("									</TD>\r\n");
      out.write("									<TD WIDTH=\"50%\">\r\n");
      out.write("										<H3 style=\"color:#6b97db\">스크립트 원본</H3> <TEXTAREA ID=\"text2\" readonly STYLE=\"width: 100%;font-size:20px;\"\r\n");
      out.write("											ROWS=7></TEXTAREA>\r\n");
      out.write("									</TD>\r\n");
      out.write("								</TR>\r\n");
      out.write("							</TABLE>\r\n");
      out.write("		\r\n");
      out.write("							<!-- diff 계산에 필요한 시간 설정\r\n");
      out.write("							If the mapping phase of the diff computation takes longer than this, then the computation\r\n");
      out.write("							is truncated and the best solution to date is returned.  While guaranteed to be correct,\r\n");
      out.write("							it may not be optimal.  A timeout of '0' allows for unlimited computation.\r\n");
      out.write("							  -->\r\n");
      out.write("							<INPUT style=\"display: none\" TYPE=\"text\" SIZE=3 MAXLENGTH=5\r\n");
      out.write("								VALUE=\"1\" ID=\"timeout\">\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("							<!--  Post-diff cleanup:-->\r\n");
      out.write("		\r\n");
      out.write("							<!-- Semantic Cleanup \r\n");
      out.write("							Increase human readability by factoring out commonalities which are likely to be\r\n");
      out.write("							coincidental.\r\n");
      out.write("							-->\r\n");
      out.write("							<input style=\"display: none\" type=\"radio\" name=\"cleanup\"\r\n");
      out.write("								id=\"semantic\" checked>\r\n");
      out.write("		\r\n");
      out.write("							<!-- Efficiency Cleanup -->\r\n");
      out.write("							<input style=\"display: none\" type=\"radio\" name=\"cleanup\"\r\n");
      out.write("								id=\"efficiency\">\r\n");
      out.write("		\r\n");
      out.write("							<!-- edit cost: \r\n");
      out.write("							Increase computational efficiency by factoring out short commonalities which are\r\n");
      out.write("							not worth the overhead.  The larger the edit cost, the more aggressive the cleanup. -->\r\n");
      out.write("		\r\n");
      out.write("							<input style=\"display: none\" TYPE=\"text\" SIZE=3 MAXLENGTH=5\r\n");
      out.write("								VALUE=\"4\" ID=\"editcost\">\r\n");
      out.write("							<!-- No Cleanup \r\n");
      out.write("							Raw output.-->\r\n");
      out.write("							<INPUT style=\"display: none\" TYPE=\"radio\" NAME=\"cleanup\" ID=\"raw\">\r\n");
      out.write("		\r\n");
      out.write("						</div>\r\n");
      out.write("						<DIV ID=\"outputdiv\" class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\"></DIV>\r\n");
      out.write("		\r\n");
      out.write("					</div>\r\n");
      out.write("							\r\n");
      out.write("					\r\n");
      out.write("					\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div id=\"recordcontent\">\r\n");
      out.write("				<div id=\"recordFunction\">\r\n");
      out.write("					<div id=\"recordInfoMark\"></div>\r\n");
      out.write("					<button id=\"recordbtn\">녹음 시작</button>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div id=\"recordCheck\">\r\n");
      out.write("					<audio controls id=\"audio\"></audio>\r\n");
      out.write("					<button id=\"recordSubmit\">녹음 파일 전송</button>\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("var scriptOn=false;\r\n");
      out.write("function showFaceScript(){\r\n");
      out.write("	scriptOn=true;\r\n");
      out.write("	$.ajax({\r\n");
      out.write("		url:\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${webPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/stu/support/faceAiScript\",\r\n");
      out.write("		dataType:\"text\",\r\n");
      out.write("		success:function(data){\r\n");
      out.write("			$('#scriptCheck').css(\"display\",\"none\");\r\n");
      out.write("			$('#scriptContent').html(`<span style=\"font-size : 18px;color: #FF5675; font-weight:bolder;\">${data}</span><br/><br/>* 질문을 읽은 뒤 답을 먼저 생각한 뒤 <strong>웹캡 켜기->녹화시작->녹화종료</strong> 순으로 눌러주세요.`);\r\n");
      out.write("		},error:function(){\r\n");
      out.write("			alert(\"실패\")\r\n");
      out.write("		}\r\n");
      out.write("	})\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//chart만들기 함수\r\n");
      out.write("function makeBarChart(xValues,yValues,barColors,chartTitle){\r\n");
      out.write("	new Chart(\"myChart\", {\r\n");
      out.write("	  type: \"pie\",\r\n");
      out.write("	  data: {\r\n");
      out.write("	    labels: xValues,\r\n");
      out.write("	    datasets: [{\r\n");
      out.write("	      backgroundColor: barColors,\r\n");
      out.write("	      data: yValues\r\n");
      out.write("	    }]\r\n");
      out.write("	  },\r\n");
      out.write("	  options: {\r\n");
      out.write("		  legend: {display: true,\r\n");
      out.write("			  position:'top',\r\n");
      out.write("			  fontColor:'black',\r\n");
      out.write("			  align:'center',\r\n");
      out.write("			  fullWidth:true},\r\n");
      out.write("		    title: {\r\n");
      out.write("		      display: true,\r\n");
      out.write("		      text: chartTitle,\r\n");
      out.write("		    },\r\n");
      out.write("			maintainAspectRatio: false,\r\n");
      out.write("			responsive:true,\r\n");
      out.write("			plugins:{\r\n");
      out.write("				labels:{\r\n");
      out.write("					render:'percentage'\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("	  }\r\n");
      out.write("	});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("function show_script(){\r\n");
      out.write("	var script_body = document.getElementById(\"script_body\");\r\n");
      out.write("	$.ajax({\r\n");
      out.write("		url:\"");
      out.print(request.getContextPath());
      out.write("/stu/support/employ/script\",\r\n");
      out.write("		type:\"get\",\r\n");
      out.write("		dataType:\"text\",\r\n");
      out.write("		success:function(data){\r\n");
      out.write("			console.log(data)\r\n");
      out.write("			script_body.innerHTML = \"<p>\"+data+\"</p>\";\r\n");
      out.write("			$(\"#text2\").val(data);\r\n");
      out.write("		},\r\n");
      out.write("		error:function(){\r\n");
      out.write("			alert(\"실패\");\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("	});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("	var videoDiv = $(\"#videoDiv\");\r\n");
      out.write("	var vidoeTag = null;\r\n");
      out.write("	let videoMediaStream = null;\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	function webcamOn() {\r\n");
      out.write("		if(!scriptOn){\r\n");
      out.write("			alert(\"모의면접 질문 스크립트 확인하기를 먼저 클릭해주세요.\");\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		var recordAgree = confirm(\"웹캠 사용에 동의하십니까?\");\r\n");
      out.write("		if (recordAgree) {\r\n");
      out.write("			var userVideo = $('<video>').addClass('user-video');\r\n");
      out.write("			videoDiv.append(userVideo);\r\n");
      out.write("			videoTag = document.querySelector(\".user-video\");\r\n");
      out.write("			videoTag.style.width=\"100%\";\r\n");
      out.write("			videoTag.style.height=\"35vw\";\r\n");
      out.write("			navigator.mediaDevices.getUserMedia({ // constraints\r\n");
      out.write("				audio : false,\r\n");
      out.write("				video : {\r\n");
      out.write("					width: 1280, height:800\r\n");
      out.write("				}\r\n");
      out.write("			}).then(function(mediaStream) {\r\n");
      out.write("				videoTag.srcObject = mediaStream;\r\n");
      out.write("				videoTag.onloadedmetadata = function() {\r\n");
      out.write("					videoTag.play();\r\n");
      out.write("				};\r\n");
      out.write("				videoMediaStream = mediaStream;\r\n");
      out.write("			});\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	function webcamOff() {\r\n");
      out.write("		if(!videoMediaStream){\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		$(\"#videoDiv *\").remove();\r\n");
      out.write("\r\n");
      out.write("		videoMediaStream.getTracks()[0].stop();\r\n");
      out.write("		videoMediaStream = null;\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	let videoRecorder = null;\r\n");
      out.write("	let recordedVideoURL = null;\r\n");
      out.write("	let videoBlob = null;\r\n");
      out.write("\r\n");
      out.write("	let videoData = [];\r\n");
      out.write("	const videoCaptureStart = function() {\r\n");
      out.write("		if (!videoMediaStream) {\r\n");
      out.write("			alert(\"웹캠을 켜주세요\");\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		if (navigator.mediaDevices.getUserMedia) {\r\n");
      out.write("			$('#redBtn').css(\"display\",\"block\");\r\n");
      out.write("			// 1) MediaStream을 매개변수로 MediaRecorder 생성자를 호출\r\n");
      out.write("			// webm만?????\r\n");
      out.write("			videoRecorder = new MediaRecorder(videoMediaStream, {\r\n");
      out.write("				mimeType : \"video/webm; codecs=vp9\"\r\n");
      out.write("			});\r\n");
      out.write("\r\n");
      out.write("			// 2) 전달받는 데이터를 처리하는 이벤트 핸들러 등록\r\n");
      out.write("\r\n");
      out.write("			videoRecorder.addEventListener('dataavailable', function(event) {\r\n");
      out.write("				if (event.data && event.data.size > 0) {\r\n");
      out.write("					videoData.push(event.data);\r\n");
      out.write("					console.log(videoData)\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("\r\n");
      out.write("			// 3) 녹화 중지 이벤트 핸들러 등록\r\n");
      out.write("			videoRecorder.onstop = function() {\r\n");
      out.write("				videoBlob = new Blob(videoData, {\r\n");
      out.write("					type : \"video/webm\"\r\n");
      out.write("				});\r\n");
      out.write("				recordedVideoURL = window.URL.createObjectURL(videoBlob);\r\n");
      out.write("				alert(\"녹화 종료\")\r\n");
      out.write("				$('#redBtn').css(\"display\",\"none\");\r\n");
      out.write("				// 이벤트 실행 시에 서버로 파일 POST\r\n");
      out.write("				sendAvi(videoBlob);\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("			// 4) 녹화 시작\r\n");
      out.write("			videoRecorder.start();\r\n");
      out.write("\r\n");
      out.write("		}\r\n");
      out.write("	};\r\n");
      out.write("\r\n");
      out.write("	const videoCaptureEnd = function() {\r\n");
      out.write("		if (videoRecorder) {\r\n");
      out.write("			// 5) 녹화 중지\r\n");
      out.write("			videoRecorder.stop();\r\n");
      out.write("			videoRecorder = null;\r\n");
      out.write("\r\n");
      out.write("			// our final videoBlob\r\n");
      out.write("			// sendAvi(videoBlob);\r\n");
      out.write("			// -> 이벤트의 비동기로 인해 순서가 꼬이므로 이벤트 발생 시에 선언한다\r\n");
      out.write("		} else {\r\n");
      out.write("			alert(\"녹화를 시작해주세요.\");\r\n");
      out.write("		}\r\n");
      out.write("	};\r\n");
      out.write("\r\n");
      out.write("	const downloadBtn = document.getElementById(\"download-btn\");\r\n");
      out.write("\r\n");
      out.write("	downloadBtn.addEventListener(\"click\", function() {\r\n");
      out.write("		if (recordedVideoURL) {\r\n");
      out.write("			const link = document.createElement(\"a\");\r\n");
      out.write("			document.body.appendChild(link);\r\n");
      out.write("			// 녹화된 영상의 URL을 href 속성으로 설정\r\n");
      out.write("			link.href = recordedVideoURL;\r\n");
      out.write("			// 저장할 파일명 설정\r\n");
      out.write("			link.download = \"video.webm\";\r\n");
      out.write("			link.click();\r\n");
      out.write("			document.body.removeChild(link);\r\n");
      out.write("			window.URL.revokeObjectURL(recordedVideoURL); // url에 연결된 메모리 해제.\r\n");
      out.write("			recordedVideoURL = null;\r\n");
      out.write("		} else {\r\n");
      out.write("			alert(\"영상을 녹화해주세요.\")\r\n");
      out.write("		}\r\n");
      out.write("	});\r\n");
      out.write("\r\n");
      out.write("	const sendAvi = function(blob) {\r\n");
      out.write("		if (blob == null)\r\n");
      out.write("			return;\r\n");
      out.write("\r\n");
      out.write("		let filename = new Date().toString() + \"ai_video.avi\";\r\n");
      out.write("		const file = new File([ blob ], filename);\r\n");
      out.write("		// url은 파이썬 플라스크 서버로 연결해야함.\r\n");
      out.write("		let fd = new FormData();\r\n");
      out.write("		fd.append(\"file\", file, filename);\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			url : \"http://192.168.141.22:5000/webcam\",\r\n");
      out.write("			type : \"post\",\r\n");
      out.write("			contentType : false,\r\n");
      out.write("			processData : false,\r\n");
      out.write("			data : fd,\r\n");
      out.write("			dataType : \"json\",\r\n");
      out.write("			success : function(data, textStatus) {\r\n");
      out.write("				document.querySelector(\"#myChartdiv\").style.display=\"block\";\r\n");
      out.write("				var xValues =  [\r\n");
      out.write("			        \"웃음\",\"슬픔\",\"무표정\",\"당황\",\"분노\"    \r\n");
      out.write("			        ];\r\n");
      out.write("				var yValues=[0,0,0,0,0];\r\n");
      out.write("				var length = 0;\r\n");
      out.write("				console.log(\"data\",data)\r\n");
      out.write("				console.log(\"data길이 \",data.length)\r\n");
      out.write("				for(var i=0;i<data.length;i++){\r\n");
      out.write("					yValues[data[i]]++;\r\n");
      out.write("					length++;\r\n");
      out.write("				}\r\n");
      out.write("				console.log(\"길이\",length)\r\n");
      out.write("				for(var i=0;i<yValues.length;i++){\r\n");
      out.write("					console.log(yValues[i]/length);\r\n");
      out.write("					yValues[i]=(yValues[i]/length)*100\r\n");
      out.write("				}\r\n");
      out.write("				console.log(\"yValue : \",yValues)\r\n");
      out.write("				barColors=[\"#fdfa87\",\"#caa6fe\",\"#b5c7ed\",\"#ffe4af\",\"#83a7a3\"];\r\n");
      out.write("				$(\".faceScript\").css(\"display\",\"none\");\r\n");
      out.write("				$(\"#faceScriptHeader\").text(\"모의 면접 분석 결과\");\r\n");
      out.write("				analysisResult(xValues,yValues);\r\n");
      out.write("				makeBarChart(xValues,yValues,barColors,\"모의면접 표정 분석차트\");\r\n");
      out.write("				console.log(\"xValues\",xValues)\r\n");
      out.write("				console.log(\"yValues\",yValues)\r\n");
      out.write("			},\r\n");
      out.write("			error : function(errorMessage) {\r\n");
      out.write("				alert(\"파일 전송 실패, 관리자에게 문의바랍니다.\")\r\n");
      out.write("				console.log(\"Error\" + errorMessage);\r\n");
      out.write("\r\n");
      out.write("			},\r\n");
      out.write("		}).done(function(data) {\r\n");
      out.write("			console.log(data);\r\n");
      out.write("		});\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");
      out.write("<script>\r\n");
      out.write("function analysisResult(xValues,yValues){\r\n");
      out.write("	\r\n");
      out.write("	objList=[]\r\n");
      out.write("	for(var i =0;i<xValues.length;i++){\r\n");
      out.write("		var myObj = {\r\n");
      out.write("				key:xValues[i],\r\n");
      out.write("				value:yValues[i]\r\n");
      out.write("		}\r\n");
      out.write("		objList.push(myObj)\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	objList.sort(function(a,b){\r\n");
      out.write("		if(a.value>b.value) return -1;\r\n");
      out.write("		if(a.value==b.value) return 0;\r\n");
      out.write("		if(a.value<b.value) return 1;\r\n");
      out.write("	})\r\n");
      out.write("	\r\n");
      out.write("	var resultStr = \"<h3>분석 결과</h3>\"\r\n");
      out.write("	for(var k=0;k<3;k++){\r\n");
      out.write("		resultStr+=`${k+1}순위는 <strong>${objList[k].key}</strong> : <strong>${parseInt(objList[k].value)}%</strong><br>`;\r\n");
      out.write("	}\r\n");
      out.write("	if(objList[0].key=='웃음'&&objList[0].value>80){\r\n");
      out.write("		$('#analysisNotice').html(\"면접관이 좋아하는 인상을 지니고 있습니다. 면접 태도가 우수한 편이라 판단됩니다.\");\r\n");
      out.write("	}else{\r\n");
      out.write("		$('#analysisNotice').html(\"면접 볼 때 좀 더 환한 미소로 응하는 것을 추천 드립니다.\")\r\n");
      out.write("	}\r\n");
      out.write("	console.log(resultStr);\r\n");
      out.write("	$('#analysisResult').html(resultStr);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<!-- 음성녹음 js -->\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("// 엘리먼트 취득\r\n");
      out.write("const audioEl = document.querySelector(\"#audio\");\r\n");
      out.write("const recordbtn = document.querySelector(\"#recordbtn\");\r\n");
      out.write("var recordInfoMark=document.querySelector(\"#recordInfoMark\");\r\n");
      out.write("var recordSubmitBtn=document.querySelector(\"#recordSubmit\");\r\n");
      out.write("// 녹음중 상태 변수\r\n");
      out.write("let isRecording = false;\r\n");
      out.write("\r\n");
      out.write("// MediaRecorder 변수 생성\r\n");
      out.write("let mediaRecorder = null;\r\n");
      out.write("\r\n");
      out.write("// 녹음 데이터 저장 배열\r\n");
      out.write("const audioArray = [];\r\n");
      out.write("var audioBlob =null;\r\n");
      out.write("recordbtn.onclick = async function (event) {\r\n");
      out.write("	if(!$(\"#script_body\").children().length){\r\n");
      out.write("		alert(\"스크립트를 먼저 확인해주세요!\");\r\n");
      out.write("		return;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("    if(!isRecording){\r\n");
      out.write("    	recordbtn.innerText=\"종료\"\r\n");
      out.write("    	recordInfoMark.style.backgroundColor=\"red\";\r\n");
      out.write("        // 마이크 mediaStream 생성: Promise를 반환하므로 async/await 사용\r\n");
      out.write("        const mediaStream = await navigator.mediaDevices.getUserMedia({audio: true});\r\n");
      out.write("\r\n");
      out.write("        // MediaRecorder 생성\r\n");
      out.write("        mediaRecorder = new MediaRecorder(mediaStream);\r\n");
      out.write("\r\n");
      out.write("        // 이벤트핸들러: 녹음 데이터 취득 처리\r\n");
      out.write("        mediaRecorder.ondataavailable = (event)=>{\r\n");
      out.write("            audioArray.push(event.data); // 오디오 데이터가 취득될 때마다 배열에 담아둔다.\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // 이벤트핸들러: 녹음 종료 처리 & 재생하기\r\n");
      out.write("        mediaRecorder.onstop = (event)=>{\r\n");
      out.write("            \r\n");
      out.write("            // 녹음이 종료되면, 배열에 담긴 오디오 데이터(Blob)들을 합친다: 코덱도 설정해준다.\r\n");
      out.write("            audioBlob = new Blob(audioArray, {\"type\": \"audio/ogg codecs=opus\"});\r\n");
      out.write("            audioArray.splice(0); // 기존 오디오 데이터들은 모두 비워 초기화한다.\r\n");
      out.write("            \r\n");
      out.write("            // Blob 데이터에 접근할 수 있는 주소를 생성한다.\r\n");
      out.write("            const blobURL = window.URL.createObjectURL(audioBlob);\r\n");
      out.write("\r\n");
      out.write("            // audio엘리먼트로 재생한다.\r\n");
      out.write("            audioEl.src = blobURL;\r\n");
      out.write("            //audioEl.play();\r\n");
      out.write("\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // 녹음 시작\r\n");
      out.write("        mediaRecorder.start();\r\n");
      out.write("        isRecording = true;\r\n");
      out.write("\r\n");
      out.write("    }else{\r\n");
      out.write("    	recordbtn.innerText=\"시작\"\r\n");
      out.write("        // 녹음 종료\r\n");
      out.write("        recordInfoMark.style.backgroundColor=\"gray\";\r\n");
      out.write("        mediaRecorder.stop();\r\n");
      out.write("        isRecording = false;\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("recordSubmitBtn.onclick = function(){\r\n");
      out.write("	if (audioBlob == null){\r\n");
      out.write("		alert(\"녹음을 해주세요.\")\r\n");
      out.write("		return;\r\n");
      out.write("	}\r\n");
      out.write("	let audio_filename = new Date().toString() + \"ai_audio.mp3\";\r\n");
      out.write("	const audio_file = new File([ audioBlob ], audio_filename);\r\n");
      out.write("	// url은 파이썬 플라스크 서버로 연결해야함.\r\n");
      out.write("	let audiofd = new FormData();\r\n");
      out.write("	audiofd.append(\"file\", audio_file, audio_filename);\r\n");
      out.write("	$.ajax({\r\n");
      out.write("		url : \"http://192.168.141.22:5000/audio\",\r\n");
      out.write("		type : \"post\",\r\n");
      out.write("		contentType : false,\r\n");
      out.write("		processData : false,\r\n");
      out.write("		data : audiofd,\r\n");
      out.write("		dataType : \"text\",\r\n");
      out.write("		success : function(data, textStatus) {\r\n");
      out.write("			alert(\"파일 전송 성공\");\r\n");
      out.write("			analysis(data);\r\n");
      out.write("			$(\"#script_body\").css(\"display\",\"none\");\r\n");
      out.write("			launch();\r\n");
      out.write("			$(\"#interviewScript\").css(\"border\",\"none\");\r\n");
      out.write("			console.log(\"오디오 저장\"+data);\r\n");
      out.write("			audioBlob=null;\r\n");
      out.write("\r\n");
      out.write("		},\r\n");
      out.write("		error : function(errorMessage) {\r\n");
      out.write("			alert(\"파일 전송 실패, 관리자에게 문의바랍니다.\")\r\n");
      out.write("			console.log(\"Error\" + errorMessage);\r\n");
      out.write("\r\n");
      out.write("		},\r\n");
      out.write("	}).done(function(data) {\r\n");
      out.write("		console.log(data);\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function analysis(data){\r\n");
      out.write("	 var text1 = document.getElementById('text1');\r\n");
      out.write("	 text1.value = data;\r\n");
      out.write("	\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
