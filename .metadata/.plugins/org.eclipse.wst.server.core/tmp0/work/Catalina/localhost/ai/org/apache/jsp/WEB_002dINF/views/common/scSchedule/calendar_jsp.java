/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.81
 * Generated at: 2022-11-27 01:49:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.common.scSchedule;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class calendar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("jar:file:/D:/A_TeachingMaterial/6.JspSpring/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/FinalProject/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/D:/A_TeachingMaterial/6.JspSpring/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/FinalProject/WEB-INF/lib/spring-security-taglibs-3.2.3.RELEASE.jar!/META-INF/security.tld", Long.valueOf(1395715282000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1662347357502L));
    _jspx_dependants.put("/WEB-INF/lib/spring-security-taglibs-3.2.3.RELEASE.jar", Long.valueOf(1663134781857L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fsec_005fauthorize_0026_005faccess;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fif_0026_005ftest;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fsec_005fauthorize_0026_005faccess = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fsec_005fauthorize_0026_005faccess.release();
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("  <meta charset='utf-8' />\r\n");
      out.write("  <!-- 화면 해상도에 따라 글자 크기 대응(모바일 대응) -->\r\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no\">\r\n");
      out.write("\r\n");
      out.write("	<script src=\"https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/locales-all.min.js\"></script>\r\n");
      out.write("	<script src=\"https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js\"></script>\r\n");
      out.write("	<link href=\"https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.css\" rel=\"stylesheet\">\r\n");
      out.write("	\r\n");
      out.write("	<script	src=\"https://uicdn.toast.com/tui.time-picker/latest/tui-time-picker.js\"></script>\r\n");
      out.write("	<script	src=\"https://uicdn.toast.com/tui.date-picker/latest/tui-date-picker.js\"></script>\r\n");
      out.write("	\r\n");
      out.write("	<link rel=\"stylesheet\"	href=\"https://uicdn.toast.com/tui.time-picker/latest/tui-time-picker.css\" />\r\n");
      out.write("	<link rel=\"stylesheet\"	href=\"https://uicdn.toast.com/tui.date-picker/latest/tui-date-picker.css\" />\r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"container-fluid\">\r\n");
      out.write("<div class=\"card\" >\r\n");
      out.write("\r\n");
      out.write("	<div class=\"card-body row\">\r\n");
      out.write("		\r\n");
      out.write("		<div class=\"card col-3 col-lg-3\" style=\"margin-top: 55px; margin-bottom: 0px;\">\r\n");
      out.write("			\r\n");
      out.write("			<div class=\"card\" id=\"scheduleDetail\" style=\"height:550px; display:none;\">\r\n");
      out.write("			\r\n");
      out.write("				<div class=\"card-header\">\r\n");
      out.write("					<div style=\"font-size: 20px;display:inline-block; text-align:center; width:100%\"><strong>일정 상세 보기</strong></div>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div class=\"card-body\">\r\n");
      out.write("					\r\n");
      out.write("					");
      if (_jspx_meth_sec_005fauthorize_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("					<div class=\"form-group row\">\r\n");
      out.write("						<label for=\"detailTitle\" class=\"col-4 col-xl-4  col-form-label text-right\">일정 제목</label>\r\n");
      out.write("						<div class=\"col-8 col-xl-8\">\r\n");
      out.write("							<input id=\"detailTitle\" readonly type=\"text\" class=\"form-control\">\r\n");
      out.write("						</div>\r\n");
      out.write("					</div>\r\n");
      out.write("					<div class=\"form-group row\">\r\n");
      out.write("						<label for=\"detailStart\" class=\"col-4 col-xl-4  col-form-label text-right\">일정 시작 시간</label>\r\n");
      out.write("						<div class=\"col-8 col-xl-8\">\r\n");
      out.write("							<input id=\"detailStart\" readonly type=\"text\" class=\"form-control\">\r\n");
      out.write("						</div>\r\n");
      out.write("					</div>\r\n");
      out.write("					<div class=\"form-group row\">\r\n");
      out.write("						<label for=\"detailEnd\" class=\"col-4 col-xl-4 col-form-label text-right\">일정 종료 시간</label>\r\n");
      out.write("						<div class=\"col-8 col-xl-8\">\r\n");
      out.write("							<input id=\"detailEnd\" readonly type=\"text\" class=\"form-control\">\r\n");
      out.write("						</div>\r\n");
      out.write("					</div>\r\n");
      out.write("					<div class=\"form-group row\">\r\n");
      out.write("						<label for=\"detailText\" class=\"col-4 col-xl-4 col-form-label text-right\">일정 상세 내용</label>\r\n");
      out.write("						<div class=\"col-8 col-xl-8\">\r\n");
      out.write("							<textarea id=\"detailText\" rows=\"10\" readonly class=\"form-control\"></textarea>\r\n");
      out.write("						</div>\r\n");
      out.write("					</div>\r\n");
      out.write("					");
      if (_jspx_meth_sec_005fauthorize_005f1(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("					<input type=\"hidden\" id=\"detailId\" value=\"\">\r\n");
      out.write("				</div>\r\n");
      out.write("				\r\n");
      out.write("			\r\n");
      out.write("			</div>\r\n");
      out.write("		\r\n");
      out.write("			");
      if (_jspx_meth_sec_005fauthorize_005f2(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("		</div>\r\n");
      out.write("		<div id='calendar' class=\"col-9 col-lg-9\"></div>\r\n");
      out.write("	</div>\r\n");
      out.write("</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
      if (_jspx_meth_c_005fif_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("$('.dateCss').css({ \"margin-left\" : \"110px\", \"margin-top\": \"0px\",\"z-index\":\"9\"});  //달력(calendar) 위치\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("function addSchedule(){\r\n");
      out.write("	$('#scheduleAdd').css(\"display\",'block');\r\n");
      out.write("	$('#scheduleDetail').css(\"display\",'none');\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("var scheduleList = ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${scheduleList}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(";\r\n");
      out.write("for(var i=0;i<scheduleList.length;i++){\r\n");
      out.write("	var startBefore = scheduleList[i].start\r\n");
      out.write("	var startAfter = startBefore.replace(/\\*/gi,\"T\");\r\n");
      out.write("	scheduleList[i].start = startAfter;\r\n");
      out.write("	var endBefore = scheduleList[i].end\r\n");
      out.write("	if(endBefore){\r\n");
      out.write("		var endAfter = endBefore.replace(/\\*/gi,\"T\");\r\n");
      out.write("		scheduleList[i].end = endAfter;\r\n");
      out.write("	}\r\n");
      out.write("}\r\n");
      out.write("console.log(scheduleList)\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("var calendar = null;\r\n");
      out.write("\r\n");
      out.write(" document.addEventListener('DOMContentLoaded', function() {\r\n");
      out.write("   var calendarEl = document.getElementById('calendar');\r\n");
      out.write("   calendar = new FullCalendar.Calendar(calendarEl, {\r\n");
      out.write("	   headerToolbar: {\r\n");
      out.write("	          left: 'prev,next today',\r\n");
      out.write("	          center: 'title',\r\n");
      out.write("	          right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'\r\n");
      out.write("	        }, // 월별로 보여줄지, 주별로 보여줄 지 선택하는  버튼 \r\n");
      out.write("		initialView: 'dayGridMonth',\r\n");
      out.write("		selectable: true,\r\n");
      out.write("		locale:'ko',\r\n");
      out.write("		events: scheduleList,\r\n");
      out.write("	   editable: true, // 수정 가능?\r\n");
      out.write("	   dayMaxEvents: true,\r\n");
      out.write("	   height:670,\r\n");
      out.write("		   eventDrop: function(info) {\r\n");
      out.write("			   \r\n");
      out.write("	\r\n");
      out.write("			    if (! confirm(info.event.title + \"이 변경되었습니다. 변경 하시겠습니까?\")) {\r\n");
      out.write("			      info.revert();\r\n");
      out.write("			    }else{\r\n");
      out.write("			    	info.event.setExtendedProp(\"memId\",'");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginUser.memId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("');\r\n");
      out.write("			    }\r\n");
      out.write("			  },\r\n");
      out.write("	  \r\n");
      out.write("	        eventAdd: function(obj) {\r\n");
      out.write("	        	console.log(\"이벤트 추가 이벤트!!!\");// 이벤트가 추가되면 발생하는 이벤트\r\n");
      out.write("		   console.log(\"추가 : \",obj)\r\n");
      out.write("			console.log(\"추가 id  : \",obj.event.id)\r\n");
      out.write("			console.log(\"추가  title : \",obj.event.title)\r\n");
      out.write("			console.log(\"추가  start: \",obj.event.start)\r\n");
      out.write("		//	console.log(\"추가  groupId: \",obj.event.groupId)\r\n");
      out.write("			console.log(\"추가  end: \",obj.event.end)\r\n");
      out.write("			var startDateObj = obj.event.start\r\n");
      out.write("			var endDateObj = obj.event.end\r\n");
      out.write("			var calendarData =null;\r\n");
      out.write("	   		var detailText = $('#addDetail').val();\r\n");
      out.write("	   		//상세 일정 추가\r\n");
      out.write("	  \r\n");
      out.write("		  	$('#detailEnd').val(\"\");\r\n");
      out.write("			$('#detailStart').val(\"\");\r\n");
      out.write("			$('#detailText').html(\"\");\r\n");
      out.write("			$(\"#addDetail\").val(\"\");\r\n");
      out.write("			\r\n");
      out.write("			console.log(\"상세\",obj.event.detail)\r\n");
      out.write("			console.log(\"ttt\",$('#detailText').val())\r\n");
      out.write("			if(endDateObj){\r\n");
      out.write("				var calendarData = {\r\n");
      out.write("			   		title:obj.event.title,\r\n");
      out.write("			   		//scheDetail:obj.event.groupId,\r\n");
      out.write("			   		scheId:obj.event.id,\r\n");
      out.write("			   		startYear:startDateObj.getFullYear(),\r\n");
      out.write("			   		startMonth:startDateObj.getMonth()+1,\r\n");
      out.write("			   		startDate:startDateObj.getDate(),\r\n");
      out.write("			   		startHour:startDateObj.getHours(),\r\n");
      out.write("			   		startMinute:+startDateObj.getMinutes(),\r\n");
      out.write("			   		endYear:endDateObj.getFullYear(),\r\n");
      out.write("			   		endMonth:endDateObj.getMonth()+1,\r\n");
      out.write("			   		endDate:endDateObj.getDate(),\r\n");
      out.write("			   		endHour:endDateObj.getHours(),\r\n");
      out.write("			   		endMinute:endDateObj.getMinutes(),\r\n");
      out.write("			   		detail:detailText\r\n");
      out.write("		   		}\r\n");
      out.write("			}else{\r\n");
      out.write("				var calendarData = {\r\n");
      out.write("				   		title:obj.event.title,\r\n");
      out.write("				   		detail:detailText,\r\n");
      out.write("				   		scheId:obj.event.id,\r\n");
      out.write("				   		startYear:startDateObj.getFullYear(),\r\n");
      out.write("				   		startMonth:startDateObj.getMonth()+1,\r\n");
      out.write("				   		startDate:startDateObj.getDate(),\r\n");
      out.write("				   		startHour:startDateObj.getHours(),\r\n");
      out.write("				   		startMinute:startDateObj.getMinutes(),\r\n");
      out.write("			   		}\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			Swal.fire({\r\n");
      out.write("		        title: '일정을 등록하시겠습니까?',\r\n");
      out.write("		        showDenyButton: true,\r\n");
      out.write("		        confirmButtonText: '네',\r\n");
      out.write("		        denyButtonText: '아니오',\r\n");
      out.write("		      }).then((result) => {\r\n");
      out.write("		        if (result.isConfirmed) {\r\n");
      out.write("		        	$.ajax({\r\n");
      out.write("						url:'");
      out.print(request.getContextPath());
      out.write("'+'/common/scSchedule/calendar/insert',\r\n");
      out.write("						type:\"post\",\r\n");
      out.write("						data:JSON.stringify(calendarData),\r\n");
      out.write("						contentType:\"application/json; charset=utf-8\",\r\n");
      out.write("						dataType:\"json\",\r\n");
      out.write("						success:function(data){\r\n");
      out.write("							Swal.fire(\r\n");
      out.write("									  '성공적으로 등록했습니다.',\r\n");
      out.write("									  '',\r\n");
      out.write("									  'success'\r\n");
      out.write("									).then(function(){\r\n");
      out.write("										location.href=location.href;\r\n");
      out.write("									});\r\n");
      out.write("									\r\n");
      out.write("							\r\n");
      out.write("						},\r\n");
      out.write("						error:function(){\r\n");
      out.write("//		 					alert(\"에러\")\r\n");
      out.write("						}\r\n");
      out.write("					})\r\n");
      out.write("		        	\r\n");
      out.write("		        	\r\n");
      out.write("		        	\r\n");
      out.write("		        \r\n");
      out.write("		               }\r\n");
      out.write("		            });\r\n");
      out.write("		           \r\n");
      out.write("			\r\n");
      out.write("		},\r\n");
      out.write("		eventChange: function(obj) { // 이벤트가 수정되면 발생하는 이벤트\r\n");
      out.write("			console.log(\"이벤트 변경 이벤트!!!\");\r\n");
      out.write("			console.log(obj);\r\n");
      out.write("		  	console.log(\"변경 : \",obj);\r\n");
      out.write("			console.log(\"변경 id  : \",obj.event.id);\r\n");
      out.write("			console.log(\"변경  start: \",obj.event.start);\r\n");
      out.write("			console.log(\"변경  end: \",obj.event.end);\r\n");
      out.write("			console.log(\"변경  상세: \",obj.event.extendedProps.detail);\r\n");
      out.write("			\r\n");
      out.write("			var startDateObj = obj.event.start\r\n");
      out.write("			var endDateObj = obj.event.end;\r\n");
      out.write("			let detail = obj.event.extendedProps.detail\r\n");
      out.write("			var memId='");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginUser.memId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("';\r\n");
      out.write("	\r\n");
      out.write("			\r\n");
      out.write("			var changeData =null;\r\n");
      out.write("			if(endDateObj){\r\n");
      out.write("				changeData = {\r\n");
      out.write("			   		title:obj.event.title,\r\n");
      out.write("			   		scheId:obj.event.id,\r\n");
      out.write("			   		memId:memId,\r\n");
      out.write("			   		startYear:startDateObj.getFullYear(),\r\n");
      out.write("			   		startMonth:startDateObj.getMonth()+1,\r\n");
      out.write("			   		startDate:startDateObj.getDate(),\r\n");
      out.write("			   		startHour:startDateObj.getHours(),\r\n");
      out.write("			   		startMinute:+startDateObj.getMinutes(),\r\n");
      out.write("			   		endYear:endDateObj.getFullYear(),\r\n");
      out.write("			   		endMonth:endDateObj.getMonth()+1,\r\n");
      out.write("			   		endDate:endDateObj.getDate(),\r\n");
      out.write("			   		endHour:endDateObj.getHours(),\r\n");
      out.write("			   		endMinute:endDateObj.getMinutes(),\r\n");
      out.write("			   		detail:detail\r\n");
      out.write("		   		}\r\n");
      out.write("			}else{\r\n");
      out.write("				changeData = {\r\n");
      out.write("				   		title:obj.event.title,\r\n");
      out.write("				   		detail:detail,\r\n");
      out.write("				   		memId:memId,\r\n");
      out.write("				   		scheId:obj.event.id,\r\n");
      out.write("				   		startYear:startDateObj.getFullYear(),\r\n");
      out.write("				   		startMonth:startDateObj.getMonth()+1,\r\n");
      out.write("				   		startDate:startDateObj.getDate(),\r\n");
      out.write("				   		startHour:startDateObj.getHours(),\r\n");
      out.write("				   		startMinute:startDateObj.getMinutes(),\r\n");
      out.write("			   		}\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				url:'");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${webPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/common/scSchedule/calendar/update',\r\n");
      out.write("				data:JSON.stringify(changeData),\r\n");
      out.write("				dataType:\"json\",\r\n");
      out.write("				contentType:\"application/json; charset=utf-8\",\r\n");
      out.write("				type:\"post\",\r\n");
      out.write("				success:function(data){\r\n");
      out.write("					console.log(data.msg);\r\n");
      out.write("					$('#scheduleAdd').css(\"display\",'none');\r\n");
      out.write("					$('#scheduleDetail').css(\"display\",'block');\r\n");
      out.write("					$('#detailTitle').val(obj.event.title);\r\n");
      out.write("					$('#detailStart').val(`${startDateObj.getFullYear()}년 ${startDateObj.getMonth()+1}월 ${startDateObj.getDate()}일 ${startDateObj.getHours()}시 ${startDateObj.getMinutes()}분`)\r\n");
      out.write("					if(endDateObj){\r\n");
      out.write("						$('#detailEnd').val(`${endDateObj.getFullYear()}년 ${endDateObj.getMonth()+1}월 ${endDateObj.getDate()}일 ${endDateObj.getHours()}시 ${endDateObj.getMinutes()}분`);\r\n");
      out.write("					}else{\r\n");
      out.write("						$('#detailEnd').val('');\r\n");
      out.write("					}\r\n");
      out.write("					$('#detailText').val(detail);\r\n");
      out.write("					$('#memId').val(memId);\r\n");
      out.write("					$('#detailTitle').attr(\"title\",obj.event.title);\r\n");
      out.write("					\r\n");
      out.write("				},\r\n");
      out.write("				error:function(){\r\n");
      out.write("// 					alert(\"에러\")\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("			})\r\n");
      out.write("		},\r\n");
      out.write("		eventRemove: function(obj){ // 이벤트가 삭제되면 발생하는 이벤트\r\n");
      out.write("		  	console.log(\"삭제 : \",obj);\r\n");
      out.write("			console.log(\"삭제 id  : \",obj.event.id);\r\n");
      out.write("			console.log(\"삭제  title : \",obj.event.title);\r\n");
      out.write("			console.log(\"삭제  start: \",obj.event.start);\r\n");
      out.write("			console.log(\"삭제  end: \",obj.event.end);\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				url : '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${webPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/common/scSchedule/calendar/delete',\r\n");
      out.write("				data : {scheId:obj.event.id},\r\n");
      out.write("				type:\"post\",\r\n");
      out.write("				success:function(data){\r\n");
      out.write("					console.log(data.msg);\r\n");
      out.write("					$('#scheduleAdd').css(\"display\",'none');\r\n");
      out.write("					$('#scheduleDetail').css(\"display\",'block');\r\n");
      out.write("					$('#detailTitle').val('');\r\n");
      out.write("					$('#detailStart').val('');\r\n");
      out.write("					$('#detailEnd').val('');\r\n");
      out.write("					$('#detailText').val('');\r\n");
      out.write("					$('#detailTitle').removeAttr(\"title\");\r\n");
      out.write("					$('#memId').val('');\r\n");
      out.write("					\r\n");
      out.write("				},\r\n");
      out.write("				error:function(){\r\n");
      out.write("// 					alert(\"에러\")\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				\r\n");
      out.write("			})\r\n");
      out.write("		},\r\n");
      out.write("		eventClick:function(info){\r\n");
      out.write("			$('#detailEnd').val(\"\");\r\n");
      out.write("			$('#detailStart').val(\"\");\r\n");
      out.write("			$('#detailText').val(\"\");\r\n");
      out.write("			showDetail(info);\r\n");
      out.write("			$('#scheduleAdd').css(\"display\",'none');\r\n");
      out.write("			$('#scheduleDetail').css(\"display\",'block');\r\n");
      out.write("		}\r\n");
      out.write("		 \r\n");
      out.write("		\r\n");
      out.write("   });\r\n");
      out.write(" if(");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginUser.memClassCd ne 'staff'}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("){\r\n");
      out.write("	   calendar.setOption('editable',false);\r\n");
      out.write("   }\r\n");
      out.write("   calendar.render();\r\n");
      out.write(" });\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("var beginHour = 00;\r\n");
      out.write("var endHour = 00;\r\n");
      out.write("var beginMin = 00;\r\n");
      out.write("var endMin = 00;\r\n");
      out.write("\r\n");
      out.write("var begin = { hour: 0, minute: 30 };\r\n");
      out.write("var end = { hour: 0, minute: 40 };\r\n");
      out.write("\r\n");
      out.write("var datepicker = new tui.DatePicker('#wrapper', {\r\n");
      out.write("    date: new Date(),\r\n");
      out.write("    language: 'ko',\r\n");
      out.write("    input: {\r\n");
      out.write("      element: '#datepicker-input',\r\n");
      out.write("      format: 'yyyy-MM-dd HH:mm A'\r\n");
      out.write("      \r\n");
      out.write("    },\r\n");
      out.write("    timePicker: {\r\n");
      out.write("      	 initialHour: 0,\r\n");
      out.write("           initialMinute: 00,\r\n");
      out.write("           inputType: 'selectbox',\r\n");
      out.write("           hourStep: 1,\r\n");
      out.write("           minuteStep: 15,\r\n");
      out.write("           showMeridiem: false,\r\n");
      out.write("      	      \r\n");
      out.write("      }\r\n");
      out.write("   \r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("var datepicker1 = new tui.DatePicker('#wrapper-1', {\r\n");
      out.write("    date: new Date(),\r\n");
      out.write("    input: {\r\n");
      out.write("      element: '#datepicker-input-1',\r\n");
      out.write("      format: 'yyyy-MM-dd HH:mm A'\r\n");
      out.write("    },\r\n");
      out.write("    timePicker: {\r\n");
      out.write("      	 initialHour: 0,\r\n");
      out.write("           initialMinute: 00,\r\n");
      out.write("           inputType: 'selectbox',\r\n");
      out.write("           hourStep: 1,\r\n");
      out.write("           minuteStep: 15,\r\n");
      out.write("           showMeridiem: false,\r\n");
      out.write("      	      \r\n");
      out.write("      }\r\n");
      out.write("    \r\n");
      out.write("  });\r\n");
      out.write("\r\n");
      out.write("var datepicker3 = new tui.DatePicker('#wrapper-3', {\r\n");
      out.write("    date: new Date(),\r\n");
      out.write("    input: {\r\n");
      out.write("      element: '#datepicker-input3',\r\n");
      out.write("      format: 'yyyy-MM-dd HH:mm A'\r\n");
      out.write("    },\r\n");
      out.write("    timePicker: {\r\n");
      out.write("   	 initialHour: 0,\r\n");
      out.write("        initialMinute: 00,\r\n");
      out.write("        inputType: 'selectbox',\r\n");
      out.write("        hourStep: 1,\r\n");
      out.write("        minuteStep: 15,\r\n");
      out.write("        showMeridiem: false,\r\n");
      out.write("   	      \r\n");
      out.write("   }\r\n");
      out.write("  });\r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("\r\n");
      out.write("var id=parseInt(");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${maxSeq}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(");\r\n");
      out.write("console.log(\"id :\",id);\r\n");
      out.write("function addEvent(){\r\n");
      out.write("	var selectOption = $(\"#oneOrMulti\").val()\r\n");
      out.write("	var selectMulti = $(\"#selectMulti\");\r\n");
      out.write("	var selectOne = $(\"#selectOne\");\r\n");
      out.write("	 var title = $(\"#eventName\");\r\n");
      out.write("	 var startDate = $(\"#datepicker-input\");\r\n");
      out.write("	 var endDate=$(\"#datepicker-input-1\");\r\n");
      out.write("	 \r\n");
      out.write("	 var startDateArr = startDate.val().split(\" \");\r\n");
      out.write("	 var endDateArr = endDate.val().split(\" \");\r\n");
      out.write("	 console.log(endDateArr)\r\n");
      out.write("	 var addDetail=$(\"#addDetail\");\r\n");
      out.write("	 \r\n");
      out.write("	 var oneStartDate = $(\"#datepicker-input3\").val();\r\n");
      out.write("	 var oneStartDateArr = oneStartDate.split(\" \");\r\n");
      out.write("	 var oneStartTime=\"\";\r\n");
      out.write("	 if(oneStartDateArr[2]==\"AM\"){\r\n");
      out.write("	 	oneStartTime = oneStartDateArr[0]+\"T\"+oneStartDateArr[1]+\":00\";\r\n");
      out.write("	 }else if(oneStartDateArr[2]==\"PM\"){\r\n");
      out.write("		 oneStartTime = oneStartDateArr[0]+\"T\"+(parseInt(oneStartDateArr[1].split(\":\")[0])+12)+\":\"+oneStartDateArr[1].split(\":\")[1]+\":00\"\r\n");
      out.write("	 }\r\n");
      out.write("	 console.log(\"oneStartTime : \",oneStartTime)\r\n");
      out.write("	 if(selectOption==\"multi\"){\r\n");
      out.write("	 	if(!title.val()){\r\n");
      out.write("	 		Swal.fire({\r\n");
      out.write("	 			  icon: 'error',\r\n");
      out.write("	 			  title: '제목을 입력해주세요',\r\n");
      out.write("	 			})\r\n");
      out.write("	 		return;\r\n");
      out.write("	 	}\r\n");
      out.write("		\r\n");
      out.write("	 	 if(startDateArr[2]==\"AM\"){\r\n");
      out.write("	 		startDate = startDateArr[0]+\"T\"+startDateArr[1]+\":00\"\r\n");
      out.write("	 	 }else if(startDateArr[2]==\"PM\"){\r\n");
      out.write("	 		startDate = startDateArr[0]+\"T\"+(parseInt(startDateArr[1].split(\":\")[0])+12)+\":\"+startDateArr[1].split(\":\")[1]+\":00\"\r\n");
      out.write("	 	 }\r\n");
      out.write("	 	 \r\n");
      out.write("	 	 if(endDateArr[2]==\"AM\"){\r\n");
      out.write("	 		endDate = endDateArr[0]+\"T\"+endDateArr[1]+\":00\"\r\n");
      out.write("		 }else if(endDateArr[2]==\"PM\"){\r\n");
      out.write("		 		endDate= endDateArr[0]+\"T\"+(parseInt(endDateArr[1].split(\":\")[0])+12)+\":\"+endDateArr[1].split(\":\")[1]+\":00\"\r\n");
      out.write("		 }\r\n");
      out.write("	 	 \r\n");
      out.write("	   	\r\n");
      out.write("		console.log(\"시작 날짜:\",startDate)\r\n");
      out.write("		console.log(\"종료 날짜:\",endDate)\r\n");
      out.write("		calendar.addEvent({\r\n");
      out.write("		  title: title.val(),\r\n");
      out.write("		  start: startDate,\r\n");
      out.write("		  end: endDate,\r\n");
      out.write("		  id:id+1,\r\n");
      out.write("		//  groupId:addDetail.val()\r\n");
      out.write("		})\r\n");
      out.write("		\r\n");
      out.write("		    \r\n");
      out.write("	}\r\n");
      out.write("	else if(selectOption==\"one\"){\r\n");
      out.write("		if(!title.val()){\r\n");
      out.write("			Swal.fire({\r\n");
      out.write("	 			  icon: 'error',\r\n");
      out.write("	 			  title: '제목을 입력해주세요',\r\n");
      out.write("	 			})\r\n");
      out.write("			\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		console.log(oneStartDate)\r\n");
      out.write("		if(startDateArr[0]){\r\n");
      out.write("			console.log(\"시작 시간 \",oneStartTime)\r\n");
      out.write("			calendar.addEvent({\r\n");
      out.write("			    title: title.val(),\r\n");
      out.write("			    start: oneStartTime,\r\n");
      out.write("			    id:id+1,\r\n");
      out.write("			//    groupId:addDetail.val(),\r\n");
      out.write("			    allDay:false\r\n");
      out.write("			  })\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("	id=id+1;\r\n");
      out.write("	var info = calendar.getEventById(id);\r\n");
      out.write("	\r\n");
      out.write("	title[0].value=\"\";\r\n");
      out.write("	selectMulti[0].style.display=\"none\";\r\n");
      out.write("	selectOne[0].style.display=\"block\";\r\n");
      out.write("	$(\"#oneOrMulti\").val(\"one\")\r\n");
      out.write("	calendar.unselect()\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("$(\"#oneOrMulti\").change(function(){\r\n");
      out.write("	let selectOption = $(\"#oneOrMulti\").val()\r\n");
      out.write("	let selectMulti = $(\"#selectMulti\");\r\n");
      out.write("	let selectOne = $(\"#selectOne\");\r\n");
      out.write("	if(selectOption=='multi'){\r\n");
      out.write("		selectOne[0].style.display=\"none\";\r\n");
      out.write("		selectMulti[0].style.display=\"block\";\r\n");
      out.write("	}\r\n");
      out.write("	if(selectOption=='one'){\r\n");
      out.write("		selectMulti[0].style.display=\"none\";\r\n");
      out.write("		selectOne[0].style.display=\"block\";\r\n");
      out.write("	}\r\n");
      out.write("})\r\n");
      out.write("</script>\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("function showDetail(info){\r\n");
      out.write("	let detailTitle = $('#detailTitle').val(info.event.title);\r\n");
      out.write("	let detailStart = info.event.start;\r\n");
      out.write("	let memId = info.event.extendedProps.memId;\r\n");
      out.write("	\r\n");
      out.write("	console.log(\"아이디 확인 :\"+memId);\r\n");
      out.write("	console.log(info)\r\n");
      out.write("	console.log(\"확인 : \",info.event.start);\r\n");
      out.write("	\r\n");
      out.write("	let detailStartTime = detailStart.getFullYear()+\"년 \"+(detailStart.getMonth()+1)+\"월 \"+detailStart.getDate()+\"일 \"+detailStart.getHours()+\"시 \"+detailStart.getMinutes()+\"분 \";\r\n");
      out.write("	$('#detailStart').val(detailStartTime);\r\n");
      out.write("	\r\n");
      out.write("	let detailEnd = info.event.end;\r\n");
      out.write("	console.log(\"끝날짜\",detailEnd)\r\n");
      out.write("	if(detailEnd){\r\n");
      out.write("		var detailEndTime = detailEnd.getFullYear()+\"년 \"+(detailEnd.getMonth()+1)+\"월 \"+detailEnd.getDate()+\"일 \"+detailEnd.getHours()+\"시 \"+detailEnd.getMinutes()+\"분 \";\r\n");
      out.write("		console.log(detailEndTime)\r\n");
      out.write("		$('#detailEnd').val(detailEndTime);\r\n");
      out.write("	}\r\n");
      out.write("	var detailId=info.event.id;\r\n");
      out.write("	$(\"#detailId\").val(detailId);\r\n");
      out.write("	\r\n");
      out.write("	console.log(\"디테일 객체 \",info)\r\n");
      out.write("	var detailText = info.event.extendedProps.detail;\r\n");
      out.write("	console.log(\"디테일 내용: \",detailText)\r\n");
      out.write("	$('#detailText').val(detailText);\r\n");
      out.write("	$('#detailTitle').attr(\"title\",detailTitle.val());\r\n");
      out.write("	\r\n");
      out.write("	$('#memId').val(memId);\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function deleteSch(){\r\n");
      out.write("	var id = $(\"#detailId\").val();\r\n");
      out.write("	var info = calendar.getEventById(id);\r\n");
      out.write("	var memId='");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginUser.memId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("';\r\n");
      out.write("	console.log(memId)\r\n");
      out.write("	console.log(info);\r\n");
      out.write("	var writer = info.extendedProps.memId;\r\n");
      out.write("	if(memId!=writer){\r\n");
      out.write("		Swal.fire({\r\n");
      out.write("			  icon: 'error',\r\n");
      out.write("			  title: '본인이 등록한 일정만 삭제 가능합니다.',\r\n");
      out.write("			})\r\n");
      out.write("		\r\n");
      out.write("		return;\r\n");
      out.write("	}\r\n");
      out.write("// 	console.log(info);\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Swal.fire({\r\n");
      out.write("        title: info.title +\"일정을 삭제하시겠습니까 ?\",\r\n");
      out.write("        showDenyButton: true,\r\n");
      out.write("        confirmButtonText: '네',\r\n");
      out.write("        denyButtonText: '아니오',\r\n");
      out.write("      }).then((result) => {\r\n");
      out.write("        if (result.isConfirmed) {\r\n");
      out.write("        	info.remove();\r\n");
      out.write("        \r\n");
      out.write("               }\r\n");
      out.write("            }).then((result) => {\r\n");
      out.write("                	Swal.fire(\r\n");
      out.write("                			  '삭제되었습니다.',\r\n");
      out.write("                			  '',\r\n");
      out.write("                			  'success'\r\n");
      out.write("                			)\r\n");
      out.write("                \r\n");
      out.write("                    })\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("// 	if(confirm(info.title +\"일정을 삭제하시겠습니까 ?\")){\r\n");
      out.write("// 		 // 확인 클릭 시\r\n");
      out.write("// 	    info.remove();\r\n");
      out.write("// 	}\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_sec_005fauthorize_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  sec:authorize
    org.springframework.security.taglibs.authz.JspAuthorizeTag _jspx_th_sec_005fauthorize_005f0 = (org.springframework.security.taglibs.authz.JspAuthorizeTag) _005fjspx_005ftagPool_005fsec_005fauthorize_0026_005faccess.get(org.springframework.security.taglibs.authz.JspAuthorizeTag.class);
    boolean _jspx_th_sec_005fauthorize_005f0_reused = false;
    try {
      _jspx_th_sec_005fauthorize_005f0.setPageContext(_jspx_page_context);
      _jspx_th_sec_005fauthorize_005f0.setParent(null);
      // /WEB-INF/views/common/scSchedule/calendar.jsp(40,5) name = access type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_sec_005fauthorize_005f0.setAccess("hasAuthority('staff')");
      int _jspx_eval_sec_005fauthorize_005f0 = _jspx_th_sec_005fauthorize_005f0.doStartTag();
      if (_jspx_eval_sec_005fauthorize_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        out.write("\r\n");
        out.write("					<div class=\"form-group row\">\r\n");
        out.write("						<label for=\"memId\" class=\"col-4 col-xl-4  col-form-label text-right\">등록자</label>\r\n");
        out.write("						<div class=\"col-8 col-xl-8\">\r\n");
        out.write("							<input id=\"memId\" readonly type=\"text\" class=\"form-control\">\r\n");
        out.write("						</div>\r\n");
        out.write("					</div>\r\n");
        out.write("					");
      }
      if (_jspx_th_sec_005fauthorize_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fsec_005fauthorize_0026_005faccess.reuse(_jspx_th_sec_005fauthorize_005f0);
      _jspx_th_sec_005fauthorize_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_sec_005fauthorize_005f0, _jsp_getInstanceManager(), _jspx_th_sec_005fauthorize_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_sec_005fauthorize_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  sec:authorize
    org.springframework.security.taglibs.authz.JspAuthorizeTag _jspx_th_sec_005fauthorize_005f1 = (org.springframework.security.taglibs.authz.JspAuthorizeTag) _005fjspx_005ftagPool_005fsec_005fauthorize_0026_005faccess.get(org.springframework.security.taglibs.authz.JspAuthorizeTag.class);
    boolean _jspx_th_sec_005fauthorize_005f1_reused = false;
    try {
      _jspx_th_sec_005fauthorize_005f1.setPageContext(_jspx_page_context);
      _jspx_th_sec_005fauthorize_005f1.setParent(null);
      // /WEB-INF/views/common/scSchedule/calendar.jsp(72,5) name = access type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_sec_005fauthorize_005f1.setAccess("hasAuthority('staff')");
      int _jspx_eval_sec_005fauthorize_005f1 = _jspx_th_sec_005fauthorize_005f1.doStartTag();
      if (_jspx_eval_sec_005fauthorize_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        out.write("\r\n");
        out.write("					<div class=\"row align-self-center justify-content-center\">\r\n");
        out.write("						<input type=\"button\" onclick=\"deleteSch()\" class=\"btn btn-secondary\" value=\"일정 삭제\">\r\n");
        out.write("						<input type=\"button\" onclick=\"addSchedule()\" class=\"btn btn-primary\" style=\"margin-left:10px;\" value=\"일정 등록 하러 가기\">\r\n");
        out.write("						\r\n");
        out.write("					</div>\r\n");
        out.write("					");
      }
      if (_jspx_th_sec_005fauthorize_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fsec_005fauthorize_0026_005faccess.reuse(_jspx_th_sec_005fauthorize_005f1);
      _jspx_th_sec_005fauthorize_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_sec_005fauthorize_005f1, _jsp_getInstanceManager(), _jspx_th_sec_005fauthorize_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_sec_005fauthorize_005f2(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  sec:authorize
    org.springframework.security.taglibs.authz.JspAuthorizeTag _jspx_th_sec_005fauthorize_005f2 = (org.springframework.security.taglibs.authz.JspAuthorizeTag) _005fjspx_005ftagPool_005fsec_005fauthorize_0026_005faccess.get(org.springframework.security.taglibs.authz.JspAuthorizeTag.class);
    boolean _jspx_th_sec_005fauthorize_005f2_reused = false;
    try {
      _jspx_th_sec_005fauthorize_005f2.setPageContext(_jspx_page_context);
      _jspx_th_sec_005fauthorize_005f2.setParent(null);
      // /WEB-INF/views/common/scSchedule/calendar.jsp(85,3) name = access type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_sec_005fauthorize_005f2.setAccess("hasAuthority('staff')");
      int _jspx_eval_sec_005fauthorize_005f2 = _jspx_th_sec_005fauthorize_005f2.doStartTag();
      if (_jspx_eval_sec_005fauthorize_005f2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        out.write("\r\n");
        out.write("			<div class=\"card\" id=\"scheduleAdd\" style=\"height:550px; display:block\">\r\n");
        out.write("				<div class=\"card-header\">\r\n");
        out.write("					<div style=\"font-size: 20px;display:inline-block; text-align:center;  width:100%\"><strong>일정 등록 하기 </strong></div>\r\n");
        out.write("				</div>\r\n");
        out.write("				<div class=\"card-body\">\r\n");
        out.write("					<select id=\"oneOrMulti\" class=\"form-control col-xl-4 col-lg-12 col-md-12 col-sm-12 col-12\" style=\"margin-bottom:8px\">\r\n");
        out.write("					<option value=\"one\">하루 일정</option>\r\n");
        out.write("					<option value=\"multi\">연속 일정</option>\r\n");
        out.write("					</select>\r\n");
        out.write("					<div class=\"row\" style=\"margin-bottom:8px\">\r\n");
        out.write("					<label for=\"eventName\" class=\"col-3 col-xl-4 col-form-label text-right\">일정 이름</label><input type=\"text\" class=\"form-control col-3 col-xl-8\"  id=\"eventName\"><br>\r\n");
        out.write("					</div>\r\n");
        out.write("					<div id=\"selectOne\">\r\n");
        out.write("						<div class=\"row\">\r\n");
        out.write("						<label for=\"datepicker-input3\" class=\"col-3 col-xl-4 col-form-label text-right\">일정 시작</label>\r\n");
        out.write("							<div\r\n");
        out.write("								class=\"tui-datepicker-input tui-datetime-input tui-has-focus\">\r\n");
        out.write("								<input type=\"text\" id=\"datepicker-input3\" name=\"oneDate\" aria-label=\"Date-Time\"> <span class=\"tui-ico-date\"></span>\r\n");
        out.write("							</div>\r\n");
        out.write("							<div id=\"wrapper-3\" class=\"dateCss\" style=\"margin-top: -1px;\"></div>\r\n");
        out.write("						</div>\r\n");
        out.write("					</div>\r\n");
        out.write("					<div id=\"selectMulti\" style=\"display:none;\">\r\n");
        out.write("						<div class=\"row\">\r\n");
        out.write("						<label for=\"datepicker-input\" class=\"col-3 col-xl-4 col-form-label text-right\">일정 시작</label> \r\n");
        out.write("							<div\r\n");
        out.write("								class=\"tui-datepicker-input tui-datetime-input tui-has-focus\">\r\n");
        out.write("								<input type=\"text\" id=\"datepicker-input\" name=\"createDate\" aria-label=\"Date-Time\"> <span class=\"tui-ico-date\"></span>\r\n");
        out.write("							</div>\r\n");
        out.write("							<div id=\"wrapper\" class=\"dateCss\" style=\"margin-top: -1px;\"></div>\r\n");
        out.write("						</div>\r\n");
        out.write("						<div class=\"row\">\r\n");
        out.write("							<label for=\"datepicker-input-1\" class=\"col-3 col-xl-4 col-form-label text-right\">일정 종료</label>\r\n");
        out.write("							<div\r\n");
        out.write("								class=\"tui-datepicker-input tui-datetime-input tui-has-focus\">\r\n");
        out.write("								<input type=\"text\" id=\"datepicker-input-1\" name=\"dueDate\"\r\n");
        out.write("									aria-label=\"Date-Time\"> <span class=\"tui-ico-date\"></span>\r\n");
        out.write("							</div>\r\n");
        out.write("							<div id=\"wrapper-1\" class=\"dateCss\" style=\"margin-top: -1px;\"></div>\r\n");
        out.write("						</div>	\r\n");
        out.write("					</div>\r\n");
        out.write("					<div class=\"row\">\r\n");
        out.write("					<label for=\"addDetail\" class=\"col-3 col-xl-4 text-right\">일정 상세</label><textarea rows=\"10\" id=\"addDetail\" class=\"form-control col-3 col-xl-8\"></textarea>\r\n");
        out.write("					</div>\r\n");
        out.write("					<br>\r\n");
        out.write("					<br>\r\n");
        out.write("						<input type=\"button\" onclick=\"addEvent()\" class=\"btn btn-primary\" value=\"일정등록\">\r\n");
        out.write("						<!--  <input type=\"button\" value=\"일정 등록\" class=\"btn btn-primary col-xl-3 col-lg-3 col-md-12 col-sm-12 col-12\" data-toggle=\"modal\" data-target=\"#exampleModal\">\r\n");
        out.write("						-->\r\n");
        out.write("				</div>\r\n");
        out.write("			</div>\r\n");
        out.write("			");
      }
      if (_jspx_th_sec_005fauthorize_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fsec_005fauthorize_0026_005faccess.reuse(_jspx_th_sec_005fauthorize_005f2);
      _jspx_th_sec_005fauthorize_005f2_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_sec_005fauthorize_005f2, _jsp_getInstanceManager(), _jspx_th_sec_005fauthorize_005f2_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f0 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f0_reused = false;
    try {
      _jspx_th_c_005fif_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f0.setParent(null);
      // /WEB-INF/views/common/scSchedule/calendar.jsp(146,0) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginUser.memClassCd ne 'staff'}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f0 = _jspx_th_c_005fif_005f0.doStartTag();
      if (_jspx_eval_c_005fif_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("<script>\r\n");
          out.write("	$('#scheduleDetail').css('display','block');\r\n");
          out.write("</script>\r\n");
          int evalDoAfterBody = _jspx_th_c_005fif_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
      _jspx_th_c_005fif_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f0_reused);
    }
    return false;
  }
}
