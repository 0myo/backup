package kr.or.ddit.service.prof;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;

import kr.or.ddit.command.Criteria;
import kr.or.ddit.command.PageMaker;
import kr.or.ddit.dao.common.AlarmDAO;
import kr.or.ddit.dao.prof.LectureNoticeDAO;
import kr.or.ddit.dto.LectureNoticeVO;
import kr.or.ddit.dto.common.AlarmVO;
import kr.or.ddit.dto.common.MemberVO;
import kr.or.ddit.exception.InvalidPasswordException;
import kr.or.ddit.exception.NotFoundIdException;

public class LectureNoticeServiceImpl implements LectureNoticeService{

	@Autowired
	private LectureNoticeDAO lectureNoticeDAO;
	public void setLectureNoticeDAO(LectureNoticeDAO lectureNoticeDAO) {
		this.lectureNoticeDAO = lectureNoticeDAO;
	}
	
	@Autowired
	private AlarmDAO alarmDAO;
	public void setAlarmDAO(AlarmDAO alarmDAO) {
		this.alarmDAO = alarmDAO;
	}
	
	@Override
	public Map<String, Object> getLectureNoticeList(Criteria cri, String lecCd) throws SQLException {
		
		cri.setPerPageNum(5); //글 갯수 5개 고정
		
		Map<String, Object> dataMap = new HashMap<String, Object>();
		
		List<LectureNoticeVO> noticeList = lectureNoticeDAO.selectLectureNoticeListByLecCd(cri, lecCd);
		
		int totalCount = lectureNoticeDAO.selectLectureNoticeTotalCountByLecCd(cri, lecCd);
		
		PageMaker pageMaker = new PageMaker();
		pageMaker.setCri(cri);
		pageMaker.setTotalCount(totalCount);
		
		dataMap.put("noticeList",noticeList);
		dataMap.put("pageMaker",pageMaker);
		
		return dataMap;
	}

	@Override
	public LectureNoticeVO getLectureNotice(LectureNoticeVO lecNotice) throws SQLException {
		LectureNoticeVO notice = lectureNoticeDAO.selectLectureNoticeByLecNoticeNo(lecNotice);
		lectureNoticeDAO.increaseViewCnt(lecNotice.getLecNoticeNo());
		return notice;
	}

	@Override
	public LectureNoticeVO getLectureNoticeForModify(LectureNoticeVO lecNotice) throws SQLException {
		LectureNoticeVO notice = lectureNoticeDAO.selectLectureNoticeByLecNoticeNo(lecNotice);
		return notice;
	}

	@Override
	public void regist(LectureNoticeVO lecNotice) throws SQLException {
		//게시글 등록
		int lecNoticeNo = lectureNoticeDAO.selectLectureNoticeSeqNext();
		lecNotice.setLecNoticeNo(lecNoticeNo);
		lectureNoticeDAO.insertLectureNotice(lecNotice);
		
		//알림 등록
//		int alarmSeq = alarmDAO.selecAlarmSeqNext();
//		AlarmVO alarm = new AlarmVO();
//		alarm.setAlarmSeq(alarmSeq);
//		alarm.setMemId(memId); //수업듣는 학생 for문으로 가져오기
//		alarm.setPrefix(prefix); //lecNotice.getLecCd????
//		alarmDAO.insertAlarm(alarm);
		
	}

	@Override
	public void modify(LectureNoticeVO lecNotice) throws SQLException {
		lectureNoticeDAO.updateLectureNotice(lecNotice);
	}

	@Override
	public void delete(int lecNoticeNo) throws SQLException {
		lectureNoticeDAO.deleteLectureNotice(lecNoticeNo);
		
	}


	
}
